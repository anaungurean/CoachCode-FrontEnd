{
  "version": 3,
  "sources": ["../../rollup/dist/es/shared/watch.js"],
  "sourcesContent": ["/*\r\n  @license\r\n\tRollup.js v4.13.0\r\n\tTue, 12 Mar 2024 05:27:08 GMT - commit 1c8afed74bd81cd38ad0b373ea6b6ec382975013\r\n\r\n\thttps://github.com/rollup/rollup\r\n\r\n\tReleased under the MIT License.\r\n*/\r\nimport { resolve } from 'node:path';\r\nimport process$1 from 'node:process';\r\nimport { picomatch as picomatch$2, getAugmentedNamespace, fseventsImporter, createFilter, rollupInternal } from './node-entry.js';\r\nimport { platform } from 'node:os';\r\nimport require$$0$1 from 'fs';\r\nimport require$$2 from 'util';\r\nimport require$$1 from 'stream';\r\nimport require$$0$2 from 'path';\r\nimport require$$2$1 from 'os';\r\nimport require$$0$3 from 'events';\r\nimport './parseAst.js';\r\nimport '../../native.js';\r\nimport 'node:perf_hooks';\r\nimport 'node:fs/promises';\r\nimport 'tty';\r\n\r\nvar chokidar = {};\r\n\r\nconst fs$3 = require$$0$1;\r\nconst { Readable } = require$$1;\r\nconst sysPath$3 = require$$0$2;\r\nconst { promisify: promisify$3 } = require$$2;\r\nconst picomatch$1 = picomatch$2;\r\n\r\nconst readdir$1 = promisify$3(fs$3.readdir);\r\nconst stat$3 = promisify$3(fs$3.stat);\r\nconst lstat$2 = promisify$3(fs$3.lstat);\r\nconst realpath$1 = promisify$3(fs$3.realpath);\r\n\r\n/**\r\n * @typedef {Object} EntryInfo\r\n * @property {String} path\r\n * @property {String} fullPath\r\n * @property {fs.Stats=} stats\r\n * @property {fs.Dirent=} dirent\r\n * @property {String} basename\r\n */\r\n\r\nconst BANG$2 = '!';\r\nconst RECURSIVE_ERROR_CODE = 'READDIRP_RECURSIVE_ERROR';\r\nconst NORMAL_FLOW_ERRORS = new Set(['ENOENT', 'EPERM', 'EACCES', 'ELOOP', RECURSIVE_ERROR_CODE]);\r\nconst FILE_TYPE = 'files';\r\nconst DIR_TYPE = 'directories';\r\nconst FILE_DIR_TYPE = 'files_directories';\r\nconst EVERYTHING_TYPE = 'all';\r\nconst ALL_TYPES = [FILE_TYPE, DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE];\r\n\r\nconst isNormalFlowError = error => NORMAL_FLOW_ERRORS.has(error.code);\r\nconst [maj, min] = process.versions.node.split('.').slice(0, 2).map(n => Number.parseInt(n, 10));\r\nconst wantBigintFsStats = process.platform === 'win32' && (maj > 10 || (maj === 10 && min >= 5));\r\n\r\nconst normalizeFilter = filter => {\r\n  if (filter === undefined) return;\r\n  if (typeof filter === 'function') return filter;\r\n\r\n  if (typeof filter === 'string') {\r\n    const glob = picomatch$1(filter.trim());\r\n    return entry => glob(entry.basename);\r\n  }\r\n\r\n  if (Array.isArray(filter)) {\r\n    const positive = [];\r\n    const negative = [];\r\n    for (const item of filter) {\r\n      const trimmed = item.trim();\r\n      if (trimmed.charAt(0) === BANG$2) {\r\n        negative.push(picomatch$1(trimmed.slice(1)));\r\n      } else {\r\n        positive.push(picomatch$1(trimmed));\r\n      }\r\n    }\r\n\r\n    if (negative.length > 0) {\r\n      if (positive.length > 0) {\r\n        return entry =>\r\n          positive.some(f => f(entry.basename)) && !negative.some(f => f(entry.basename));\r\n      }\r\n      return entry => !negative.some(f => f(entry.basename));\r\n    }\r\n    return entry => positive.some(f => f(entry.basename));\r\n  }\r\n};\r\n\r\nclass ReaddirpStream extends Readable {\r\n  static get defaultOptions() {\r\n    return {\r\n      root: '.',\r\n      /* eslint-disable no-unused-vars */\r\n      fileFilter: (path) => true,\r\n      directoryFilter: (path) => true,\r\n      /* eslint-enable no-unused-vars */\r\n      type: FILE_TYPE,\r\n      lstat: false,\r\n      depth: 2147483648,\r\n      alwaysStat: false\r\n    };\r\n  }\r\n\r\n  constructor(options = {}) {\r\n    super({\r\n      objectMode: true,\r\n      autoDestroy: true,\r\n      highWaterMark: options.highWaterMark || 4096\r\n    });\r\n    const opts = { ...ReaddirpStream.defaultOptions, ...options };\r\n    const { root, type } = opts;\r\n\r\n    this._fileFilter = normalizeFilter(opts.fileFilter);\r\n    this._directoryFilter = normalizeFilter(opts.directoryFilter);\r\n\r\n    const statMethod = opts.lstat ? lstat$2 : stat$3;\r\n    // Use bigint stats if it's windows and stat() supports options (node 10+).\r\n    if (wantBigintFsStats) {\r\n      this._stat = path => statMethod(path, { bigint: true });\r\n    } else {\r\n      this._stat = statMethod;\r\n    }\r\n\r\n    this._maxDepth = opts.depth;\r\n    this._wantsDir = [DIR_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);\r\n    this._wantsFile = [FILE_TYPE, FILE_DIR_TYPE, EVERYTHING_TYPE].includes(type);\r\n    this._wantsEverything = type === EVERYTHING_TYPE;\r\n    this._root = sysPath$3.resolve(root);\r\n    this._isDirent = ('Dirent' in fs$3) && !opts.alwaysStat;\r\n    this._statsProp = this._isDirent ? 'dirent' : 'stats';\r\n    this._rdOptions = { encoding: 'utf8', withFileTypes: this._isDirent };\r\n\r\n    // Launch stream with one parent, the root dir.\r\n    this.parents = [this._exploreDir(root, 1)];\r\n    this.reading = false;\r\n    this.parent = undefined;\r\n  }\r\n\r\n  async _read(batch) {\r\n    if (this.reading) return;\r\n    this.reading = true;\r\n\r\n    try {\r\n      while (!this.destroyed && batch > 0) {\r\n        const { path, depth, files = [] } = this.parent || {};\r\n\r\n        if (files.length > 0) {\r\n          const slice = files.splice(0, batch).map(dirent => this._formatEntry(dirent, path));\r\n          for (const entry of await Promise.all(slice)) {\r\n            if (this.destroyed) return;\r\n\r\n            const entryType = await this._getEntryType(entry);\r\n            if (entryType === 'directory' && this._directoryFilter(entry)) {\r\n              if (depth <= this._maxDepth) {\r\n                this.parents.push(this._exploreDir(entry.fullPath, depth + 1));\r\n              }\r\n\r\n              if (this._wantsDir) {\r\n                this.push(entry);\r\n                batch--;\r\n              }\r\n            } else if ((entryType === 'file' || this._includeAsFile(entry)) && this._fileFilter(entry)) {\r\n              if (this._wantsFile) {\r\n                this.push(entry);\r\n                batch--;\r\n              }\r\n            }\r\n          }\r\n        } else {\r\n          const parent = this.parents.pop();\r\n          if (!parent) {\r\n            this.push(null);\r\n            break;\r\n          }\r\n          this.parent = await parent;\r\n          if (this.destroyed) return;\r\n        }\r\n      }\r\n    } catch (error) {\r\n      this.destroy(error);\r\n    } finally {\r\n      this.reading = false;\r\n    }\r\n  }\r\n\r\n  async _exploreDir(path, depth) {\r\n    let files;\r\n    try {\r\n      files = await readdir$1(path, this._rdOptions);\r\n    } catch (error) {\r\n      this._onError(error);\r\n    }\r\n    return { files, depth, path };\r\n  }\r\n\r\n  async _formatEntry(dirent, path) {\r\n    let entry;\r\n    try {\r\n      const basename = this._isDirent ? dirent.name : dirent;\r\n      const fullPath = sysPath$3.resolve(sysPath$3.join(path, basename));\r\n      entry = { path: sysPath$3.relative(this._root, fullPath), fullPath, basename };\r\n      entry[this._statsProp] = this._isDirent ? dirent : await this._stat(fullPath);\r\n    } catch (err) {\r\n      this._onError(err);\r\n    }\r\n    return entry;\r\n  }\r\n\r\n  _onError(err) {\r\n    if (isNormalFlowError(err) && !this.destroyed) {\r\n      this.emit('warn', err);\r\n    } else {\r\n      this.destroy(err);\r\n    }\r\n  }\r\n\r\n  async _getEntryType(entry) {\r\n    // entry may be undefined, because a warning or an error were emitted\r\n    // and the statsProp is undefined\r\n    const stats = entry && entry[this._statsProp];\r\n    if (!stats) {\r\n      return;\r\n    }\r\n    if (stats.isFile()) {\r\n      return 'file';\r\n    }\r\n    if (stats.isDirectory()) {\r\n      return 'directory';\r\n    }\r\n    if (stats && stats.isSymbolicLink()) {\r\n      const full = entry.fullPath;\r\n      try {\r\n        const entryRealPath = await realpath$1(full);\r\n        const entryRealPathStats = await lstat$2(entryRealPath);\r\n        if (entryRealPathStats.isFile()) {\r\n          return 'file';\r\n        }\r\n        if (entryRealPathStats.isDirectory()) {\r\n          const len = entryRealPath.length;\r\n          if (full.startsWith(entryRealPath) && full.substr(len, 1) === sysPath$3.sep) {\r\n            const recursiveError = new Error(\r\n              `Circular symlink detected: \"${full}\" points to \"${entryRealPath}\"`\r\n            );\r\n            recursiveError.code = RECURSIVE_ERROR_CODE;\r\n            return this._onError(recursiveError);\r\n          }\r\n          return 'directory';\r\n        }\r\n      } catch (error) {\r\n        this._onError(error);\r\n      }\r\n    }\r\n  }\r\n\r\n  _includeAsFile(entry) {\r\n    const stats = entry && entry[this._statsProp];\r\n\r\n    return stats && this._wantsEverything && !stats.isDirectory();\r\n  }\r\n}\r\n\r\n/**\r\n * @typedef {Object} ReaddirpArguments\r\n * @property {Function=} fileFilter\r\n * @property {Function=} directoryFilter\r\n * @property {String=} type\r\n * @property {Number=} depth\r\n * @property {String=} root\r\n * @property {Boolean=} lstat\r\n * @property {Boolean=} bigint\r\n */\r\n\r\n/**\r\n * Main function which ends up calling readdirRec and reads all files and directories in given root recursively.\r\n * @param {String} root Root directory\r\n * @param {ReaddirpArguments=} options Options to specify root (start directory), filters and recursion depth\r\n */\r\nconst readdirp$1 = (root, options = {}) => {\r\n  let type = options.entryType || options.type;\r\n  if (type === 'both') type = FILE_DIR_TYPE; // backwards-compatibility\r\n  if (type) options.type = type;\r\n  if (!root) {\r\n    throw new Error('readdirp: root argument is required. Usage: readdirp(root, options)');\r\n  } else if (typeof root !== 'string') {\r\n    throw new TypeError('readdirp: root argument must be a string. Usage: readdirp(root, options)');\r\n  } else if (type && !ALL_TYPES.includes(type)) {\r\n    throw new Error(`readdirp: Invalid type passed. Use one of ${ALL_TYPES.join(', ')}`);\r\n  }\r\n\r\n  options.root = root;\r\n  return new ReaddirpStream(options);\r\n};\r\n\r\nconst readdirpPromise = (root, options = {}) => {\r\n  return new Promise((resolve, reject) => {\r\n    const files = [];\r\n    readdirp$1(root, options)\r\n      .on('data', entry => files.push(entry))\r\n      .on('end', () => resolve(files))\r\n      .on('error', error => reject(error));\r\n  });\r\n};\r\n\r\nreaddirp$1.promise = readdirpPromise;\r\nreaddirp$1.ReaddirpStream = ReaddirpStream;\r\nreaddirp$1.default = readdirp$1;\r\n\r\nvar readdirp_1 = readdirp$1;\r\n\r\nvar anymatch$2 = {exports: {}};\r\n\r\n/*!\r\n * normalize-path <https://github.com/jonschlinkert/normalize-path>\r\n *\r\n * Copyright (c) 2014-2018, Jon Schlinkert.\r\n * Released under the MIT License.\r\n */\r\n\r\nvar normalizePath$2 = function(path, stripTrailing) {\r\n  if (typeof path !== 'string') {\r\n    throw new TypeError('expected path to be a string');\r\n  }\r\n\r\n  if (path === '\\\\' || path === '/') return '/';\r\n\r\n  var len = path.length;\r\n  if (len <= 1) return path;\r\n\r\n  // ensure that win32 namespaces has two leading slashes, so that the path is\r\n  // handled properly by the win32 version of path.parse() after being normalized\r\n  // https://msdn.microsoft.com/library/windows/desktop/aa365247(v=vs.85).aspx#namespaces\r\n  var prefix = '';\r\n  if (len > 4 && path[3] === '\\\\') {\r\n    var ch = path[2];\r\n    if ((ch === '?' || ch === '.') && path.slice(0, 2) === '\\\\\\\\') {\r\n      path = path.slice(2);\r\n      prefix = '//';\r\n    }\r\n  }\r\n\r\n  var segs = path.split(/[/\\\\]+/);\r\n  if (stripTrailing !== false && segs[segs.length - 1] === '') {\r\n    segs.pop();\r\n  }\r\n  return prefix + segs.join('/');\r\n};\r\n\r\nvar anymatch_1 = anymatch$2.exports;\r\n\r\nObject.defineProperty(anymatch_1, \"__esModule\", { value: true });\r\n\r\nconst picomatch = picomatch$2;\r\nconst normalizePath$1 = normalizePath$2;\r\n\r\n/**\r\n * @typedef {(testString: string) => boolean} AnymatchFn\r\n * @typedef {string|RegExp|AnymatchFn} AnymatchPattern\r\n * @typedef {AnymatchPattern|AnymatchPattern[]} AnymatchMatcher\r\n */\r\nconst BANG$1 = '!';\r\nconst DEFAULT_OPTIONS = {returnIndex: false};\r\nconst arrify$1 = (item) => Array.isArray(item) ? item : [item];\r\n\r\n/**\r\n * @param {AnymatchPattern} matcher\r\n * @param {object} options\r\n * @returns {AnymatchFn}\r\n */\r\nconst createPattern = (matcher, options) => {\r\n  if (typeof matcher === 'function') {\r\n    return matcher;\r\n  }\r\n  if (typeof matcher === 'string') {\r\n    const glob = picomatch(matcher, options);\r\n    return (string) => matcher === string || glob(string);\r\n  }\r\n  if (matcher instanceof RegExp) {\r\n    return (string) => matcher.test(string);\r\n  }\r\n  return (string) => false;\r\n};\r\n\r\n/**\r\n * @param {Array<Function>} patterns\r\n * @param {Array<Function>} negPatterns\r\n * @param {String|Array} args\r\n * @param {Boolean} returnIndex\r\n * @returns {boolean|number}\r\n */\r\nconst matchPatterns = (patterns, negPatterns, args, returnIndex) => {\r\n  const isList = Array.isArray(args);\r\n  const _path = isList ? args[0] : args;\r\n  if (!isList && typeof _path !== 'string') {\r\n    throw new TypeError('anymatch: second argument must be a string: got ' +\r\n      Object.prototype.toString.call(_path))\r\n  }\r\n  const path = normalizePath$1(_path, false);\r\n\r\n  for (let index = 0; index < negPatterns.length; index++) {\r\n    const nglob = negPatterns[index];\r\n    if (nglob(path)) {\r\n      return returnIndex ? -1 : false;\r\n    }\r\n  }\r\n\r\n  const applied = isList && [path].concat(args.slice(1));\r\n  for (let index = 0; index < patterns.length; index++) {\r\n    const pattern = patterns[index];\r\n    if (isList ? pattern(...applied) : pattern(path)) {\r\n      return returnIndex ? index : true;\r\n    }\r\n  }\r\n\r\n  return returnIndex ? -1 : false;\r\n};\r\n\r\n/**\r\n * @param {AnymatchMatcher} matchers\r\n * @param {Array|string} testString\r\n * @param {object} options\r\n * @returns {boolean|number|Function}\r\n */\r\nconst anymatch$1 = (matchers, testString, options = DEFAULT_OPTIONS) => {\r\n  if (matchers == null) {\r\n    throw new TypeError('anymatch: specify first argument');\r\n  }\r\n  const opts = typeof options === 'boolean' ? {returnIndex: options} : options;\r\n  const returnIndex = opts.returnIndex || false;\r\n\r\n  // Early cache for matchers.\r\n  const mtchers = arrify$1(matchers);\r\n  const negatedGlobs = mtchers\r\n    .filter(item => typeof item === 'string' && item.charAt(0) === BANG$1)\r\n    .map(item => item.slice(1))\r\n    .map(item => picomatch(item, opts));\r\n  const patterns = mtchers\r\n    .filter(item => typeof item !== 'string' || (typeof item === 'string' && item.charAt(0) !== BANG$1))\r\n    .map(matcher => createPattern(matcher, opts));\r\n\r\n  if (testString == null) {\r\n    return (testString, ri = false) => {\r\n      const returnIndex = typeof ri === 'boolean' ? ri : false;\r\n      return matchPatterns(patterns, negatedGlobs, testString, returnIndex);\r\n    }\r\n  }\r\n\r\n  return matchPatterns(patterns, negatedGlobs, testString, returnIndex);\r\n};\r\n\r\nanymatch$1.default = anymatch$1;\r\nanymatch$2.exports = anymatch$1;\r\n\r\nvar anymatchExports = anymatch$2.exports;\r\n\r\n/*!\r\n * is-extglob <https://github.com/jonschlinkert/is-extglob>\r\n *\r\n * Copyright (c) 2014-2016, Jon Schlinkert.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nvar isExtglob$1 = function isExtglob(str) {\r\n  if (typeof str !== 'string' || str === '') {\r\n    return false;\r\n  }\r\n\r\n  var match;\r\n  while ((match = /(\\\\).|([@?!+*]\\(.*\\))/g.exec(str))) {\r\n    if (match[2]) return true;\r\n    str = str.slice(match.index + match[0].length);\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n/*!\r\n * is-glob <https://github.com/jonschlinkert/is-glob>\r\n *\r\n * Copyright (c) 2014-2017, Jon Schlinkert.\r\n * Released under the MIT License.\r\n */\r\n\r\nvar isExtglob = isExtglob$1;\r\nvar chars = { '{': '}', '(': ')', '[': ']'};\r\nvar strictCheck = function(str) {\r\n  if (str[0] === '!') {\r\n    return true;\r\n  }\r\n  var index = 0;\r\n  var pipeIndex = -2;\r\n  var closeSquareIndex = -2;\r\n  var closeCurlyIndex = -2;\r\n  var closeParenIndex = -2;\r\n  var backSlashIndex = -2;\r\n  while (index < str.length) {\r\n    if (str[index] === '*') {\r\n      return true;\r\n    }\r\n\r\n    if (str[index + 1] === '?' && /[\\].+)]/.test(str[index])) {\r\n      return true;\r\n    }\r\n\r\n    if (closeSquareIndex !== -1 && str[index] === '[' && str[index + 1] !== ']') {\r\n      if (closeSquareIndex < index) {\r\n        closeSquareIndex = str.indexOf(']', index);\r\n      }\r\n      if (closeSquareIndex > index) {\r\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\r\n          return true;\r\n        }\r\n        backSlashIndex = str.indexOf('\\\\', index);\r\n        if (backSlashIndex === -1 || backSlashIndex > closeSquareIndex) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closeCurlyIndex !== -1 && str[index] === '{' && str[index + 1] !== '}') {\r\n      closeCurlyIndex = str.indexOf('}', index);\r\n      if (closeCurlyIndex > index) {\r\n        backSlashIndex = str.indexOf('\\\\', index);\r\n        if (backSlashIndex === -1 || backSlashIndex > closeCurlyIndex) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (closeParenIndex !== -1 && str[index] === '(' && str[index + 1] === '?' && /[:!=]/.test(str[index + 2]) && str[index + 3] !== ')') {\r\n      closeParenIndex = str.indexOf(')', index);\r\n      if (closeParenIndex > index) {\r\n        backSlashIndex = str.indexOf('\\\\', index);\r\n        if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\r\n          return true;\r\n        }\r\n      }\r\n    }\r\n\r\n    if (pipeIndex !== -1 && str[index] === '(' && str[index + 1] !== '|') {\r\n      if (pipeIndex < index) {\r\n        pipeIndex = str.indexOf('|', index);\r\n      }\r\n      if (pipeIndex !== -1 && str[pipeIndex + 1] !== ')') {\r\n        closeParenIndex = str.indexOf(')', pipeIndex);\r\n        if (closeParenIndex > pipeIndex) {\r\n          backSlashIndex = str.indexOf('\\\\', pipeIndex);\r\n          if (backSlashIndex === -1 || backSlashIndex > closeParenIndex) {\r\n            return true;\r\n          }\r\n        }\r\n      }\r\n    }\r\n\r\n    if (str[index] === '\\\\') {\r\n      var open = str[index + 1];\r\n      index += 2;\r\n      var close = chars[open];\r\n\r\n      if (close) {\r\n        var n = str.indexOf(close, index);\r\n        if (n !== -1) {\r\n          index = n + 1;\r\n        }\r\n      }\r\n\r\n      if (str[index] === '!') {\r\n        return true;\r\n      }\r\n    } else {\r\n      index++;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nvar relaxedCheck = function(str) {\r\n  if (str[0] === '!') {\r\n    return true;\r\n  }\r\n  var index = 0;\r\n  while (index < str.length) {\r\n    if (/[*?{}()[\\]]/.test(str[index])) {\r\n      return true;\r\n    }\r\n\r\n    if (str[index] === '\\\\') {\r\n      var open = str[index + 1];\r\n      index += 2;\r\n      var close = chars[open];\r\n\r\n      if (close) {\r\n        var n = str.indexOf(close, index);\r\n        if (n !== -1) {\r\n          index = n + 1;\r\n        }\r\n      }\r\n\r\n      if (str[index] === '!') {\r\n        return true;\r\n      }\r\n    } else {\r\n      index++;\r\n    }\r\n  }\r\n  return false;\r\n};\r\n\r\nvar isGlob$2 = function isGlob(str, options) {\r\n  if (typeof str !== 'string' || str === '') {\r\n    return false;\r\n  }\r\n\r\n  if (isExtglob(str)) {\r\n    return true;\r\n  }\r\n\r\n  var check = strictCheck;\r\n\r\n  // optionally relax check\r\n  if (options && options.strict === false) {\r\n    check = relaxedCheck;\r\n  }\r\n\r\n  return check(str);\r\n};\r\n\r\nvar isGlob$1 = isGlob$2;\r\nvar pathPosixDirname = require$$0$2.posix.dirname;\r\nvar isWin32 = require$$2$1.platform() === 'win32';\r\n\r\nvar slash = '/';\r\nvar backslash = /\\\\/g;\r\nvar enclosure = /[\\{\\[].*[\\}\\]]$/;\r\nvar globby = /(^|[^\\\\])([\\{\\[]|\\([^\\)]+$)/;\r\nvar escaped = /\\\\([\\!\\*\\?\\|\\[\\]\\(\\)\\{\\}])/g;\r\n\r\n/**\r\n * @param {string} str\r\n * @param {Object} opts\r\n * @param {boolean} [opts.flipBackslashes=true]\r\n * @returns {string}\r\n */\r\nvar globParent$1 = function globParent(str, opts) {\r\n  var options = Object.assign({ flipBackslashes: true }, opts);\r\n\r\n  // flip windows path separators\r\n  if (options.flipBackslashes && isWin32 && str.indexOf(slash) < 0) {\r\n    str = str.replace(backslash, slash);\r\n  }\r\n\r\n  // special case for strings ending in enclosure containing path separator\r\n  if (enclosure.test(str)) {\r\n    str += slash;\r\n  }\r\n\r\n  // preserves full path in case of trailing path separator\r\n  str += 'a';\r\n\r\n  // remove path parts that are globby\r\n  do {\r\n    str = pathPosixDirname(str);\r\n  } while (isGlob$1(str) || globby.test(str));\r\n\r\n  // remove escape chars and return result\r\n  return str.replace(escaped, '$1');\r\n};\r\n\r\nvar utils$3 = {};\r\n\r\n(function (exports) {\r\n\r\n\texports.isInteger = num => {\r\n\t  if (typeof num === 'number') {\r\n\t    return Number.isInteger(num);\r\n\t  }\r\n\t  if (typeof num === 'string' && num.trim() !== '') {\r\n\t    return Number.isInteger(Number(num));\r\n\t  }\r\n\t  return false;\r\n\t};\r\n\r\n\t/**\r\n\t * Find a node of the given type\r\n\t */\r\n\r\n\texports.find = (node, type) => node.nodes.find(node => node.type === type);\r\n\r\n\t/**\r\n\t * Find a node of the given type\r\n\t */\r\n\r\n\texports.exceedsLimit = (min, max, step = 1, limit) => {\r\n\t  if (limit === false) return false;\r\n\t  if (!exports.isInteger(min) || !exports.isInteger(max)) return false;\r\n\t  return ((Number(max) - Number(min)) / Number(step)) >= limit;\r\n\t};\r\n\r\n\t/**\r\n\t * Escape the given node with '\\\\' before node.value\r\n\t */\r\n\r\n\texports.escapeNode = (block, n = 0, type) => {\r\n\t  let node = block.nodes[n];\r\n\t  if (!node) return;\r\n\r\n\t  if ((type && node.type === type) || node.type === 'open' || node.type === 'close') {\r\n\t    if (node.escaped !== true) {\r\n\t      node.value = '\\\\' + node.value;\r\n\t      node.escaped = true;\r\n\t    }\r\n\t  }\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if the given brace node should be enclosed in literal braces\r\n\t */\r\n\r\n\texports.encloseBrace = node => {\r\n\t  if (node.type !== 'brace') return false;\r\n\t  if ((node.commas >> 0 + node.ranges >> 0) === 0) {\r\n\t    node.invalid = true;\r\n\t    return true;\r\n\t  }\r\n\t  return false;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if a brace node is invalid.\r\n\t */\r\n\r\n\texports.isInvalidBrace = block => {\r\n\t  if (block.type !== 'brace') return false;\r\n\t  if (block.invalid === true || block.dollar) return true;\r\n\t  if ((block.commas >> 0 + block.ranges >> 0) === 0) {\r\n\t    block.invalid = true;\r\n\t    return true;\r\n\t  }\r\n\t  if (block.open !== true || block.close !== true) {\r\n\t    block.invalid = true;\r\n\t    return true;\r\n\t  }\r\n\t  return false;\r\n\t};\r\n\r\n\t/**\r\n\t * Returns true if a node is an open or close node\r\n\t */\r\n\r\n\texports.isOpenOrClose = node => {\r\n\t  if (node.type === 'open' || node.type === 'close') {\r\n\t    return true;\r\n\t  }\r\n\t  return node.open === true || node.close === true;\r\n\t};\r\n\r\n\t/**\r\n\t * Reduce an array of text nodes.\r\n\t */\r\n\r\n\texports.reduce = nodes => nodes.reduce((acc, node) => {\r\n\t  if (node.type === 'text') acc.push(node.value);\r\n\t  if (node.type === 'range') node.type = 'text';\r\n\t  return acc;\r\n\t}, []);\r\n\r\n\t/**\r\n\t * Flatten an array\r\n\t */\r\n\r\n\texports.flatten = (...args) => {\r\n\t  const result = [];\r\n\t  const flat = arr => {\r\n\t    for (let i = 0; i < arr.length; i++) {\r\n\t      let ele = arr[i];\r\n\t      Array.isArray(ele) ? flat(ele) : ele !== void 0 && result.push(ele);\r\n\t    }\r\n\t    return result;\r\n\t  };\r\n\t  flat(args);\r\n\t  return result;\r\n\t}; \r\n} (utils$3));\r\n\r\nconst utils$2 = utils$3;\r\n\r\nvar stringify$4 = (ast, options = {}) => {\r\n  let stringify = (node, parent = {}) => {\r\n    let invalidBlock = options.escapeInvalid && utils$2.isInvalidBrace(parent);\r\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\r\n    let output = '';\r\n\r\n    if (node.value) {\r\n      if ((invalidBlock || invalidNode) && utils$2.isOpenOrClose(node)) {\r\n        return '\\\\' + node.value;\r\n      }\r\n      return node.value;\r\n    }\r\n\r\n    if (node.value) {\r\n      return node.value;\r\n    }\r\n\r\n    if (node.nodes) {\r\n      for (let child of node.nodes) {\r\n        output += stringify(child);\r\n      }\r\n    }\r\n    return output;\r\n  };\r\n\r\n  return stringify(ast);\r\n};\r\n\r\n/*!\r\n * is-number <https://github.com/jonschlinkert/is-number>\r\n *\r\n * Copyright (c) 2014-present, Jon Schlinkert.\r\n * Released under the MIT License.\r\n */\r\n\r\nvar isNumber$2 = function(num) {\r\n  if (typeof num === 'number') {\r\n    return num - num === 0;\r\n  }\r\n  if (typeof num === 'string' && num.trim() !== '') {\r\n    return Number.isFinite ? Number.isFinite(+num) : isFinite(+num);\r\n  }\r\n  return false;\r\n};\r\n\r\n/*!\r\n * to-regex-range <https://github.com/micromatch/to-regex-range>\r\n *\r\n * Copyright (c) 2015-present, Jon Schlinkert.\r\n * Released under the MIT License.\r\n */\r\n\r\nconst isNumber$1 = isNumber$2;\r\n\r\nconst toRegexRange$1 = (min, max, options) => {\r\n  if (isNumber$1(min) === false) {\r\n    throw new TypeError('toRegexRange: expected the first argument to be a number');\r\n  }\r\n\r\n  if (max === void 0 || min === max) {\r\n    return String(min);\r\n  }\r\n\r\n  if (isNumber$1(max) === false) {\r\n    throw new TypeError('toRegexRange: expected the second argument to be a number.');\r\n  }\r\n\r\n  let opts = { relaxZeros: true, ...options };\r\n  if (typeof opts.strictZeros === 'boolean') {\r\n    opts.relaxZeros = opts.strictZeros === false;\r\n  }\r\n\r\n  let relax = String(opts.relaxZeros);\r\n  let shorthand = String(opts.shorthand);\r\n  let capture = String(opts.capture);\r\n  let wrap = String(opts.wrap);\r\n  let cacheKey = min + ':' + max + '=' + relax + shorthand + capture + wrap;\r\n\r\n  if (toRegexRange$1.cache.hasOwnProperty(cacheKey)) {\r\n    return toRegexRange$1.cache[cacheKey].result;\r\n  }\r\n\r\n  let a = Math.min(min, max);\r\n  let b = Math.max(min, max);\r\n\r\n  if (Math.abs(a - b) === 1) {\r\n    let result = min + '|' + max;\r\n    if (opts.capture) {\r\n      return `(${result})`;\r\n    }\r\n    if (opts.wrap === false) {\r\n      return result;\r\n    }\r\n    return `(?:${result})`;\r\n  }\r\n\r\n  let isPadded = hasPadding(min) || hasPadding(max);\r\n  let state = { min, max, a, b };\r\n  let positives = [];\r\n  let negatives = [];\r\n\r\n  if (isPadded) {\r\n    state.isPadded = isPadded;\r\n    state.maxLen = String(state.max).length;\r\n  }\r\n\r\n  if (a < 0) {\r\n    let newMin = b < 0 ? Math.abs(b) : 1;\r\n    negatives = splitToPatterns(newMin, Math.abs(a), state, opts);\r\n    a = state.a = 0;\r\n  }\r\n\r\n  if (b >= 0) {\r\n    positives = splitToPatterns(a, b, state, opts);\r\n  }\r\n\r\n  state.negatives = negatives;\r\n  state.positives = positives;\r\n  state.result = collatePatterns(negatives, positives);\r\n\r\n  if (opts.capture === true) {\r\n    state.result = `(${state.result})`;\r\n  } else if (opts.wrap !== false && (positives.length + negatives.length) > 1) {\r\n    state.result = `(?:${state.result})`;\r\n  }\r\n\r\n  toRegexRange$1.cache[cacheKey] = state;\r\n  return state.result;\r\n};\r\n\r\nfunction collatePatterns(neg, pos, options) {\r\n  let onlyNegative = filterPatterns(neg, pos, '-', false) || [];\r\n  let onlyPositive = filterPatterns(pos, neg, '', false) || [];\r\n  let intersected = filterPatterns(neg, pos, '-?', true) || [];\r\n  let subpatterns = onlyNegative.concat(intersected).concat(onlyPositive);\r\n  return subpatterns.join('|');\r\n}\r\n\r\nfunction splitToRanges(min, max) {\r\n  let nines = 1;\r\n  let zeros = 1;\r\n\r\n  let stop = countNines(min, nines);\r\n  let stops = new Set([max]);\r\n\r\n  while (min <= stop && stop <= max) {\r\n    stops.add(stop);\r\n    nines += 1;\r\n    stop = countNines(min, nines);\r\n  }\r\n\r\n  stop = countZeros(max + 1, zeros) - 1;\r\n\r\n  while (min < stop && stop <= max) {\r\n    stops.add(stop);\r\n    zeros += 1;\r\n    stop = countZeros(max + 1, zeros) - 1;\r\n  }\r\n\r\n  stops = [...stops];\r\n  stops.sort(compare);\r\n  return stops;\r\n}\r\n\r\n/**\r\n * Convert a range to a regex pattern\r\n * @param {Number} `start`\r\n * @param {Number} `stop`\r\n * @return {String}\r\n */\r\n\r\nfunction rangeToPattern(start, stop, options) {\r\n  if (start === stop) {\r\n    return { pattern: start, count: [], digits: 0 };\r\n  }\r\n\r\n  let zipped = zip(start, stop);\r\n  let digits = zipped.length;\r\n  let pattern = '';\r\n  let count = 0;\r\n\r\n  for (let i = 0; i < digits; i++) {\r\n    let [startDigit, stopDigit] = zipped[i];\r\n\r\n    if (startDigit === stopDigit) {\r\n      pattern += startDigit;\r\n\r\n    } else if (startDigit !== '0' || stopDigit !== '9') {\r\n      pattern += toCharacterClass(startDigit, stopDigit);\r\n\r\n    } else {\r\n      count++;\r\n    }\r\n  }\r\n\r\n  if (count) {\r\n    pattern += options.shorthand === true ? '\\\\d' : '[0-9]';\r\n  }\r\n\r\n  return { pattern, count: [count], digits };\r\n}\r\n\r\nfunction splitToPatterns(min, max, tok, options) {\r\n  let ranges = splitToRanges(min, max);\r\n  let tokens = [];\r\n  let start = min;\r\n  let prev;\r\n\r\n  for (let i = 0; i < ranges.length; i++) {\r\n    let max = ranges[i];\r\n    let obj = rangeToPattern(String(start), String(max), options);\r\n    let zeros = '';\r\n\r\n    if (!tok.isPadded && prev && prev.pattern === obj.pattern) {\r\n      if (prev.count.length > 1) {\r\n        prev.count.pop();\r\n      }\r\n\r\n      prev.count.push(obj.count[0]);\r\n      prev.string = prev.pattern + toQuantifier(prev.count);\r\n      start = max + 1;\r\n      continue;\r\n    }\r\n\r\n    if (tok.isPadded) {\r\n      zeros = padZeros(max, tok, options);\r\n    }\r\n\r\n    obj.string = zeros + obj.pattern + toQuantifier(obj.count);\r\n    tokens.push(obj);\r\n    start = max + 1;\r\n    prev = obj;\r\n  }\r\n\r\n  return tokens;\r\n}\r\n\r\nfunction filterPatterns(arr, comparison, prefix, intersection, options) {\r\n  let result = [];\r\n\r\n  for (let ele of arr) {\r\n    let { string } = ele;\r\n\r\n    // only push if _both_ are negative...\r\n    if (!intersection && !contains(comparison, 'string', string)) {\r\n      result.push(prefix + string);\r\n    }\r\n\r\n    // or _both_ are positive\r\n    if (intersection && contains(comparison, 'string', string)) {\r\n      result.push(prefix + string);\r\n    }\r\n  }\r\n  return result;\r\n}\r\n\r\n/**\r\n * Zip strings\r\n */\r\n\r\nfunction zip(a, b) {\r\n  let arr = [];\r\n  for (let i = 0; i < a.length; i++) arr.push([a[i], b[i]]);\r\n  return arr;\r\n}\r\n\r\nfunction compare(a, b) {\r\n  return a > b ? 1 : b > a ? -1 : 0;\r\n}\r\n\r\nfunction contains(arr, key, val) {\r\n  return arr.some(ele => ele[key] === val);\r\n}\r\n\r\nfunction countNines(min, len) {\r\n  return Number(String(min).slice(0, -len) + '9'.repeat(len));\r\n}\r\n\r\nfunction countZeros(integer, zeros) {\r\n  return integer - (integer % Math.pow(10, zeros));\r\n}\r\n\r\nfunction toQuantifier(digits) {\r\n  let [start = 0, stop = ''] = digits;\r\n  if (stop || start > 1) {\r\n    return `{${start + (stop ? ',' + stop : '')}}`;\r\n  }\r\n  return '';\r\n}\r\n\r\nfunction toCharacterClass(a, b, options) {\r\n  return `[${a}${(b - a === 1) ? '' : '-'}${b}]`;\r\n}\r\n\r\nfunction hasPadding(str) {\r\n  return /^-?(0+)\\d/.test(str);\r\n}\r\n\r\nfunction padZeros(value, tok, options) {\r\n  if (!tok.isPadded) {\r\n    return value;\r\n  }\r\n\r\n  let diff = Math.abs(tok.maxLen - String(value).length);\r\n  let relax = options.relaxZeros !== false;\r\n\r\n  switch (diff) {\r\n    case 0:\r\n      return '';\r\n    case 1:\r\n      return relax ? '0?' : '0';\r\n    case 2:\r\n      return relax ? '0{0,2}' : '00';\r\n    default: {\r\n      return relax ? `0{0,${diff}}` : `0{${diff}}`;\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n * Cache\r\n */\r\n\r\ntoRegexRange$1.cache = {};\r\ntoRegexRange$1.clearCache = () => (toRegexRange$1.cache = {});\r\n\r\n/**\r\n * Expose `toRegexRange`\r\n */\r\n\r\nvar toRegexRange_1 = toRegexRange$1;\r\n\r\n/*!\r\n * fill-range <https://github.com/jonschlinkert/fill-range>\r\n *\r\n * Copyright (c) 2014-present, Jon Schlinkert.\r\n * Licensed under the MIT License.\r\n */\r\n\r\nconst util = require$$2;\r\nconst toRegexRange = toRegexRange_1;\r\n\r\nconst isObject = val => val !== null && typeof val === 'object' && !Array.isArray(val);\r\n\r\nconst transform = toNumber => {\r\n  return value => toNumber === true ? Number(value) : String(value);\r\n};\r\n\r\nconst isValidValue = value => {\r\n  return typeof value === 'number' || (typeof value === 'string' && value !== '');\r\n};\r\n\r\nconst isNumber = num => Number.isInteger(+num);\r\n\r\nconst zeros = input => {\r\n  let value = `${input}`;\r\n  let index = -1;\r\n  if (value[0] === '-') value = value.slice(1);\r\n  if (value === '0') return false;\r\n  while (value[++index] === '0');\r\n  return index > 0;\r\n};\r\n\r\nconst stringify$3 = (start, end, options) => {\r\n  if (typeof start === 'string' || typeof end === 'string') {\r\n    return true;\r\n  }\r\n  return options.stringify === true;\r\n};\r\n\r\nconst pad = (input, maxLength, toNumber) => {\r\n  if (maxLength > 0) {\r\n    let dash = input[0] === '-' ? '-' : '';\r\n    if (dash) input = input.slice(1);\r\n    input = (dash + input.padStart(dash ? maxLength - 1 : maxLength, '0'));\r\n  }\r\n  if (toNumber === false) {\r\n    return String(input);\r\n  }\r\n  return input;\r\n};\r\n\r\nconst toMaxLen = (input, maxLength) => {\r\n  let negative = input[0] === '-' ? '-' : '';\r\n  if (negative) {\r\n    input = input.slice(1);\r\n    maxLength--;\r\n  }\r\n  while (input.length < maxLength) input = '0' + input;\r\n  return negative ? ('-' + input) : input;\r\n};\r\n\r\nconst toSequence = (parts, options) => {\r\n  parts.negatives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\r\n  parts.positives.sort((a, b) => a < b ? -1 : a > b ? 1 : 0);\r\n\r\n  let prefix = options.capture ? '' : '?:';\r\n  let positives = '';\r\n  let negatives = '';\r\n  let result;\r\n\r\n  if (parts.positives.length) {\r\n    positives = parts.positives.join('|');\r\n  }\r\n\r\n  if (parts.negatives.length) {\r\n    negatives = `-(${prefix}${parts.negatives.join('|')})`;\r\n  }\r\n\r\n  if (positives && negatives) {\r\n    result = `${positives}|${negatives}`;\r\n  } else {\r\n    result = positives || negatives;\r\n  }\r\n\r\n  if (options.wrap) {\r\n    return `(${prefix}${result})`;\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\nconst toRange = (a, b, isNumbers, options) => {\r\n  if (isNumbers) {\r\n    return toRegexRange(a, b, { wrap: false, ...options });\r\n  }\r\n\r\n  let start = String.fromCharCode(a);\r\n  if (a === b) return start;\r\n\r\n  let stop = String.fromCharCode(b);\r\n  return `[${start}-${stop}]`;\r\n};\r\n\r\nconst toRegex = (start, end, options) => {\r\n  if (Array.isArray(start)) {\r\n    let wrap = options.wrap === true;\r\n    let prefix = options.capture ? '' : '?:';\r\n    return wrap ? `(${prefix}${start.join('|')})` : start.join('|');\r\n  }\r\n  return toRegexRange(start, end, options);\r\n};\r\n\r\nconst rangeError = (...args) => {\r\n  return new RangeError('Invalid range arguments: ' + util.inspect(...args));\r\n};\r\n\r\nconst invalidRange = (start, end, options) => {\r\n  if (options.strictRanges === true) throw rangeError([start, end]);\r\n  return [];\r\n};\r\n\r\nconst invalidStep = (step, options) => {\r\n  if (options.strictRanges === true) {\r\n    throw new TypeError(`Expected step \"${step}\" to be a number`);\r\n  }\r\n  return [];\r\n};\r\n\r\nconst fillNumbers = (start, end, step = 1, options = {}) => {\r\n  let a = Number(start);\r\n  let b = Number(end);\r\n\r\n  if (!Number.isInteger(a) || !Number.isInteger(b)) {\r\n    if (options.strictRanges === true) throw rangeError([start, end]);\r\n    return [];\r\n  }\r\n\r\n  // fix negative zero\r\n  if (a === 0) a = 0;\r\n  if (b === 0) b = 0;\r\n\r\n  let descending = a > b;\r\n  let startString = String(start);\r\n  let endString = String(end);\r\n  let stepString = String(step);\r\n  step = Math.max(Math.abs(step), 1);\r\n\r\n  let padded = zeros(startString) || zeros(endString) || zeros(stepString);\r\n  let maxLen = padded ? Math.max(startString.length, endString.length, stepString.length) : 0;\r\n  let toNumber = padded === false && stringify$3(start, end, options) === false;\r\n  let format = options.transform || transform(toNumber);\r\n\r\n  if (options.toRegex && step === 1) {\r\n    return toRange(toMaxLen(start, maxLen), toMaxLen(end, maxLen), true, options);\r\n  }\r\n\r\n  let parts = { negatives: [], positives: [] };\r\n  let push = num => parts[num < 0 ? 'negatives' : 'positives'].push(Math.abs(num));\r\n  let range = [];\r\n  let index = 0;\r\n\r\n  while (descending ? a >= b : a <= b) {\r\n    if (options.toRegex === true && step > 1) {\r\n      push(a);\r\n    } else {\r\n      range.push(pad(format(a, index), maxLen, toNumber));\r\n    }\r\n    a = descending ? a - step : a + step;\r\n    index++;\r\n  }\r\n\r\n  if (options.toRegex === true) {\r\n    return step > 1\r\n      ? toSequence(parts, options)\r\n      : toRegex(range, null, { wrap: false, ...options });\r\n  }\r\n\r\n  return range;\r\n};\r\n\r\nconst fillLetters = (start, end, step = 1, options = {}) => {\r\n  if ((!isNumber(start) && start.length > 1) || (!isNumber(end) && end.length > 1)) {\r\n    return invalidRange(start, end, options);\r\n  }\r\n\r\n\r\n  let format = options.transform || (val => String.fromCharCode(val));\r\n  let a = `${start}`.charCodeAt(0);\r\n  let b = `${end}`.charCodeAt(0);\r\n\r\n  let descending = a > b;\r\n  let min = Math.min(a, b);\r\n  let max = Math.max(a, b);\r\n\r\n  if (options.toRegex && step === 1) {\r\n    return toRange(min, max, false, options);\r\n  }\r\n\r\n  let range = [];\r\n  let index = 0;\r\n\r\n  while (descending ? a >= b : a <= b) {\r\n    range.push(format(a, index));\r\n    a = descending ? a - step : a + step;\r\n    index++;\r\n  }\r\n\r\n  if (options.toRegex === true) {\r\n    return toRegex(range, null, { wrap: false, options });\r\n  }\r\n\r\n  return range;\r\n};\r\n\r\nconst fill$2 = (start, end, step, options = {}) => {\r\n  if (end == null && isValidValue(start)) {\r\n    return [start];\r\n  }\r\n\r\n  if (!isValidValue(start) || !isValidValue(end)) {\r\n    return invalidRange(start, end, options);\r\n  }\r\n\r\n  if (typeof step === 'function') {\r\n    return fill$2(start, end, 1, { transform: step });\r\n  }\r\n\r\n  if (isObject(step)) {\r\n    return fill$2(start, end, 0, step);\r\n  }\r\n\r\n  let opts = { ...options };\r\n  if (opts.capture === true) opts.wrap = true;\r\n  step = step || opts.step || 1;\r\n\r\n  if (!isNumber(step)) {\r\n    if (step != null && !isObject(step)) return invalidStep(step, opts);\r\n    return fill$2(start, end, 1, step);\r\n  }\r\n\r\n  if (isNumber(start) && isNumber(end)) {\r\n    return fillNumbers(start, end, step, opts);\r\n  }\r\n\r\n  return fillLetters(start, end, Math.max(Math.abs(step), 1), opts);\r\n};\r\n\r\nvar fillRange = fill$2;\r\n\r\nconst fill$1 = fillRange;\r\nconst utils$1 = utils$3;\r\n\r\nconst compile$1 = (ast, options = {}) => {\r\n  let walk = (node, parent = {}) => {\r\n    let invalidBlock = utils$1.isInvalidBrace(parent);\r\n    let invalidNode = node.invalid === true && options.escapeInvalid === true;\r\n    let invalid = invalidBlock === true || invalidNode === true;\r\n    let prefix = options.escapeInvalid === true ? '\\\\' : '';\r\n    let output = '';\r\n\r\n    if (node.isOpen === true) {\r\n      return prefix + node.value;\r\n    }\r\n    if (node.isClose === true) {\r\n      return prefix + node.value;\r\n    }\r\n\r\n    if (node.type === 'open') {\r\n      return invalid ? (prefix + node.value) : '(';\r\n    }\r\n\r\n    if (node.type === 'close') {\r\n      return invalid ? (prefix + node.value) : ')';\r\n    }\r\n\r\n    if (node.type === 'comma') {\r\n      return node.prev.type === 'comma' ? '' : (invalid ? node.value : '|');\r\n    }\r\n\r\n    if (node.value) {\r\n      return node.value;\r\n    }\r\n\r\n    if (node.nodes && node.ranges > 0) {\r\n      let args = utils$1.reduce(node.nodes);\r\n      let range = fill$1(...args, { ...options, wrap: false, toRegex: true });\r\n\r\n      if (range.length !== 0) {\r\n        return args.length > 1 && range.length > 1 ? `(${range})` : range;\r\n      }\r\n    }\r\n\r\n    if (node.nodes) {\r\n      for (let child of node.nodes) {\r\n        output += walk(child, node);\r\n      }\r\n    }\r\n    return output;\r\n  };\r\n\r\n  return walk(ast);\r\n};\r\n\r\nvar compile_1 = compile$1;\r\n\r\nconst fill = fillRange;\r\nconst stringify$2 = stringify$4;\r\nconst utils = utils$3;\r\n\r\nconst append = (queue = '', stash = '', enclose = false) => {\r\n  let result = [];\r\n\r\n  queue = [].concat(queue);\r\n  stash = [].concat(stash);\r\n\r\n  if (!stash.length) return queue;\r\n  if (!queue.length) {\r\n    return enclose ? utils.flatten(stash).map(ele => `{${ele}}`) : stash;\r\n  }\r\n\r\n  for (let item of queue) {\r\n    if (Array.isArray(item)) {\r\n      for (let value of item) {\r\n        result.push(append(value, stash, enclose));\r\n      }\r\n    } else {\r\n      for (let ele of stash) {\r\n        if (enclose === true && typeof ele === 'string') ele = `{${ele}}`;\r\n        result.push(Array.isArray(ele) ? append(item, ele, enclose) : (item + ele));\r\n      }\r\n    }\r\n  }\r\n  return utils.flatten(result);\r\n};\r\n\r\nconst expand$1 = (ast, options = {}) => {\r\n  let rangeLimit = options.rangeLimit === void 0 ? 1000 : options.rangeLimit;\r\n\r\n  let walk = (node, parent = {}) => {\r\n    node.queue = [];\r\n\r\n    let p = parent;\r\n    let q = parent.queue;\r\n\r\n    while (p.type !== 'brace' && p.type !== 'root' && p.parent) {\r\n      p = p.parent;\r\n      q = p.queue;\r\n    }\r\n\r\n    if (node.invalid || node.dollar) {\r\n      q.push(append(q.pop(), stringify$2(node, options)));\r\n      return;\r\n    }\r\n\r\n    if (node.type === 'brace' && node.invalid !== true && node.nodes.length === 2) {\r\n      q.push(append(q.pop(), ['{}']));\r\n      return;\r\n    }\r\n\r\n    if (node.nodes && node.ranges > 0) {\r\n      let args = utils.reduce(node.nodes);\r\n\r\n      if (utils.exceedsLimit(...args, options.step, rangeLimit)) {\r\n        throw new RangeError('expanded array length exceeds range limit. Use options.rangeLimit to increase or disable the limit.');\r\n      }\r\n\r\n      let range = fill(...args, options);\r\n      if (range.length === 0) {\r\n        range = stringify$2(node, options);\r\n      }\r\n\r\n      q.push(append(q.pop(), range));\r\n      node.nodes = [];\r\n      return;\r\n    }\r\n\r\n    let enclose = utils.encloseBrace(node);\r\n    let queue = node.queue;\r\n    let block = node;\r\n\r\n    while (block.type !== 'brace' && block.type !== 'root' && block.parent) {\r\n      block = block.parent;\r\n      queue = block.queue;\r\n    }\r\n\r\n    for (let i = 0; i < node.nodes.length; i++) {\r\n      let child = node.nodes[i];\r\n\r\n      if (child.type === 'comma' && node.type === 'brace') {\r\n        if (i === 1) queue.push('');\r\n        queue.push('');\r\n        continue;\r\n      }\r\n\r\n      if (child.type === 'close') {\r\n        q.push(append(q.pop(), queue, enclose));\r\n        continue;\r\n      }\r\n\r\n      if (child.value && child.type !== 'open') {\r\n        queue.push(append(queue.pop(), child.value));\r\n        continue;\r\n      }\r\n\r\n      if (child.nodes) {\r\n        walk(child, node);\r\n      }\r\n    }\r\n\r\n    return queue;\r\n  };\r\n\r\n  return utils.flatten(walk(ast));\r\n};\r\n\r\nvar expand_1 = expand$1;\r\n\r\nvar constants$1 = {\r\n  MAX_LENGTH: 1024 * 64,\r\n\r\n  // Digits\r\n  CHAR_0: '0', /* 0 */\r\n  CHAR_9: '9', /* 9 */\r\n\r\n  // Alphabet chars.\r\n  CHAR_UPPERCASE_A: 'A', /* A */\r\n  CHAR_LOWERCASE_A: 'a', /* a */\r\n  CHAR_UPPERCASE_Z: 'Z', /* Z */\r\n  CHAR_LOWERCASE_Z: 'z', /* z */\r\n\r\n  CHAR_LEFT_PARENTHESES: '(', /* ( */\r\n  CHAR_RIGHT_PARENTHESES: ')', /* ) */\r\n\r\n  CHAR_ASTERISK: '*', /* * */\r\n\r\n  // Non-alphabetic chars.\r\n  CHAR_AMPERSAND: '&', /* & */\r\n  CHAR_AT: '@', /* @ */\r\n  CHAR_BACKSLASH: '\\\\', /* \\ */\r\n  CHAR_BACKTICK: '`', /* ` */\r\n  CHAR_CARRIAGE_RETURN: '\\r', /* \\r */\r\n  CHAR_CIRCUMFLEX_ACCENT: '^', /* ^ */\r\n  CHAR_COLON: ':', /* : */\r\n  CHAR_COMMA: ',', /* , */\r\n  CHAR_DOLLAR: '$', /* . */\r\n  CHAR_DOT: '.', /* . */\r\n  CHAR_DOUBLE_QUOTE: '\"', /* \" */\r\n  CHAR_EQUAL: '=', /* = */\r\n  CHAR_EXCLAMATION_MARK: '!', /* ! */\r\n  CHAR_FORM_FEED: '\\f', /* \\f */\r\n  CHAR_FORWARD_SLASH: '/', /* / */\r\n  CHAR_HASH: '#', /* # */\r\n  CHAR_HYPHEN_MINUS: '-', /* - */\r\n  CHAR_LEFT_ANGLE_BRACKET: '<', /* < */\r\n  CHAR_LEFT_CURLY_BRACE: '{', /* { */\r\n  CHAR_LEFT_SQUARE_BRACKET: '[', /* [ */\r\n  CHAR_LINE_FEED: '\\n', /* \\n */\r\n  CHAR_NO_BREAK_SPACE: '\\u00A0', /* \\u00A0 */\r\n  CHAR_PERCENT: '%', /* % */\r\n  CHAR_PLUS: '+', /* + */\r\n  CHAR_QUESTION_MARK: '?', /* ? */\r\n  CHAR_RIGHT_ANGLE_BRACKET: '>', /* > */\r\n  CHAR_RIGHT_CURLY_BRACE: '}', /* } */\r\n  CHAR_RIGHT_SQUARE_BRACKET: ']', /* ] */\r\n  CHAR_SEMICOLON: ';', /* ; */\r\n  CHAR_SINGLE_QUOTE: '\\'', /* ' */\r\n  CHAR_SPACE: ' ', /*   */\r\n  CHAR_TAB: '\\t', /* \\t */\r\n  CHAR_UNDERSCORE: '_', /* _ */\r\n  CHAR_VERTICAL_LINE: '|', /* | */\r\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE: '\\uFEFF' /* \\uFEFF */\r\n};\r\n\r\nconst stringify$1 = stringify$4;\r\n\r\n/**\r\n * Constants\r\n */\r\n\r\nconst {\r\n  MAX_LENGTH,\r\n  CHAR_BACKSLASH, /* \\ */\r\n  CHAR_BACKTICK, /* ` */\r\n  CHAR_COMMA, /* , */\r\n  CHAR_DOT, /* . */\r\n  CHAR_LEFT_PARENTHESES, /* ( */\r\n  CHAR_RIGHT_PARENTHESES, /* ) */\r\n  CHAR_LEFT_CURLY_BRACE, /* { */\r\n  CHAR_RIGHT_CURLY_BRACE, /* } */\r\n  CHAR_LEFT_SQUARE_BRACKET, /* [ */\r\n  CHAR_RIGHT_SQUARE_BRACKET, /* ] */\r\n  CHAR_DOUBLE_QUOTE, /* \" */\r\n  CHAR_SINGLE_QUOTE, /* ' */\r\n  CHAR_NO_BREAK_SPACE,\r\n  CHAR_ZERO_WIDTH_NOBREAK_SPACE\r\n} = constants$1;\r\n\r\n/**\r\n * parse\r\n */\r\n\r\nconst parse$1 = (input, options = {}) => {\r\n  if (typeof input !== 'string') {\r\n    throw new TypeError('Expected a string');\r\n  }\r\n\r\n  let opts = options || {};\r\n  let max = typeof opts.maxLength === 'number' ? Math.min(MAX_LENGTH, opts.maxLength) : MAX_LENGTH;\r\n  if (input.length > max) {\r\n    throw new SyntaxError(`Input length (${input.length}), exceeds max characters (${max})`);\r\n  }\r\n\r\n  let ast = { type: 'root', input, nodes: [] };\r\n  let stack = [ast];\r\n  let block = ast;\r\n  let prev = ast;\r\n  let brackets = 0;\r\n  let length = input.length;\r\n  let index = 0;\r\n  let depth = 0;\r\n  let value;\r\n\r\n  /**\r\n   * Helpers\r\n   */\r\n\r\n  const advance = () => input[index++];\r\n  const push = node => {\r\n    if (node.type === 'text' && prev.type === 'dot') {\r\n      prev.type = 'text';\r\n    }\r\n\r\n    if (prev && prev.type === 'text' && node.type === 'text') {\r\n      prev.value += node.value;\r\n      return;\r\n    }\r\n\r\n    block.nodes.push(node);\r\n    node.parent = block;\r\n    node.prev = prev;\r\n    prev = node;\r\n    return node;\r\n  };\r\n\r\n  push({ type: 'bos' });\r\n\r\n  while (index < length) {\r\n    block = stack[stack.length - 1];\r\n    value = advance();\r\n\r\n    /**\r\n     * Invalid chars\r\n     */\r\n\r\n    if (value === CHAR_ZERO_WIDTH_NOBREAK_SPACE || value === CHAR_NO_BREAK_SPACE) {\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Escaped chars\r\n     */\r\n\r\n    if (value === CHAR_BACKSLASH) {\r\n      push({ type: 'text', value: (options.keepEscaping ? value : '') + advance() });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Right square bracket (literal): ']'\r\n     */\r\n\r\n    if (value === CHAR_RIGHT_SQUARE_BRACKET) {\r\n      push({ type: 'text', value: '\\\\' + value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Left square bracket: '['\r\n     */\r\n\r\n    if (value === CHAR_LEFT_SQUARE_BRACKET) {\r\n      brackets++;\r\n      let next;\r\n\r\n      while (index < length && (next = advance())) {\r\n        value += next;\r\n\r\n        if (next === CHAR_LEFT_SQUARE_BRACKET) {\r\n          brackets++;\r\n          continue;\r\n        }\r\n\r\n        if (next === CHAR_BACKSLASH) {\r\n          value += advance();\r\n          continue;\r\n        }\r\n\r\n        if (next === CHAR_RIGHT_SQUARE_BRACKET) {\r\n          brackets--;\r\n\r\n          if (brackets === 0) {\r\n            break;\r\n          }\r\n        }\r\n      }\r\n\r\n      push({ type: 'text', value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Parentheses\r\n     */\r\n\r\n    if (value === CHAR_LEFT_PARENTHESES) {\r\n      block = push({ type: 'paren', nodes: [] });\r\n      stack.push(block);\r\n      push({ type: 'text', value });\r\n      continue;\r\n    }\r\n\r\n    if (value === CHAR_RIGHT_PARENTHESES) {\r\n      if (block.type !== 'paren') {\r\n        push({ type: 'text', value });\r\n        continue;\r\n      }\r\n      block = stack.pop();\r\n      push({ type: 'text', value });\r\n      block = stack[stack.length - 1];\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Quotes: '|\"|`\r\n     */\r\n\r\n    if (value === CHAR_DOUBLE_QUOTE || value === CHAR_SINGLE_QUOTE || value === CHAR_BACKTICK) {\r\n      let open = value;\r\n      let next;\r\n\r\n      if (options.keepQuotes !== true) {\r\n        value = '';\r\n      }\r\n\r\n      while (index < length && (next = advance())) {\r\n        if (next === CHAR_BACKSLASH) {\r\n          value += next + advance();\r\n          continue;\r\n        }\r\n\r\n        if (next === open) {\r\n          if (options.keepQuotes === true) value += next;\r\n          break;\r\n        }\r\n\r\n        value += next;\r\n      }\r\n\r\n      push({ type: 'text', value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Left curly brace: '{'\r\n     */\r\n\r\n    if (value === CHAR_LEFT_CURLY_BRACE) {\r\n      depth++;\r\n\r\n      let dollar = prev.value && prev.value.slice(-1) === '$' || block.dollar === true;\r\n      let brace = {\r\n        type: 'brace',\r\n        open: true,\r\n        close: false,\r\n        dollar,\r\n        depth,\r\n        commas: 0,\r\n        ranges: 0,\r\n        nodes: []\r\n      };\r\n\r\n      block = push(brace);\r\n      stack.push(block);\r\n      push({ type: 'open', value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Right curly brace: '}'\r\n     */\r\n\r\n    if (value === CHAR_RIGHT_CURLY_BRACE) {\r\n      if (block.type !== 'brace') {\r\n        push({ type: 'text', value });\r\n        continue;\r\n      }\r\n\r\n      let type = 'close';\r\n      block = stack.pop();\r\n      block.close = true;\r\n\r\n      push({ type, value });\r\n      depth--;\r\n\r\n      block = stack[stack.length - 1];\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Comma: ','\r\n     */\r\n\r\n    if (value === CHAR_COMMA && depth > 0) {\r\n      if (block.ranges > 0) {\r\n        block.ranges = 0;\r\n        let open = block.nodes.shift();\r\n        block.nodes = [open, { type: 'text', value: stringify$1(block) }];\r\n      }\r\n\r\n      push({ type: 'comma', value });\r\n      block.commas++;\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Dot: '.'\r\n     */\r\n\r\n    if (value === CHAR_DOT && depth > 0 && block.commas === 0) {\r\n      let siblings = block.nodes;\r\n\r\n      if (depth === 0 || siblings.length === 0) {\r\n        push({ type: 'text', value });\r\n        continue;\r\n      }\r\n\r\n      if (prev.type === 'dot') {\r\n        block.range = [];\r\n        prev.value += value;\r\n        prev.type = 'range';\r\n\r\n        if (block.nodes.length !== 3 && block.nodes.length !== 5) {\r\n          block.invalid = true;\r\n          block.ranges = 0;\r\n          prev.type = 'text';\r\n          continue;\r\n        }\r\n\r\n        block.ranges++;\r\n        block.args = [];\r\n        continue;\r\n      }\r\n\r\n      if (prev.type === 'range') {\r\n        siblings.pop();\r\n\r\n        let before = siblings[siblings.length - 1];\r\n        before.value += prev.value + value;\r\n        prev = before;\r\n        block.ranges--;\r\n        continue;\r\n      }\r\n\r\n      push({ type: 'dot', value });\r\n      continue;\r\n    }\r\n\r\n    /**\r\n     * Text\r\n     */\r\n\r\n    push({ type: 'text', value });\r\n  }\r\n\r\n  // Mark imbalanced braces and brackets as invalid\r\n  do {\r\n    block = stack.pop();\r\n\r\n    if (block.type !== 'root') {\r\n      block.nodes.forEach(node => {\r\n        if (!node.nodes) {\r\n          if (node.type === 'open') node.isOpen = true;\r\n          if (node.type === 'close') node.isClose = true;\r\n          if (!node.nodes) node.type = 'text';\r\n          node.invalid = true;\r\n        }\r\n      });\r\n\r\n      // get the location of the block on parent.nodes (block's siblings)\r\n      let parent = stack[stack.length - 1];\r\n      let index = parent.nodes.indexOf(block);\r\n      // replace the (invalid) block with it's nodes\r\n      parent.nodes.splice(index, 1, ...block.nodes);\r\n    }\r\n  } while (stack.length > 0);\r\n\r\n  push({ type: 'eos' });\r\n  return ast;\r\n};\r\n\r\nvar parse_1 = parse$1;\r\n\r\nconst stringify = stringify$4;\r\nconst compile = compile_1;\r\nconst expand = expand_1;\r\nconst parse = parse_1;\r\n\r\n/**\r\n * Expand the given pattern or create a regex-compatible string.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces('{a,b,c}', { compile: true })); //=> ['(a|b|c)']\r\n * console.log(braces('{a,b,c}')); //=> ['a', 'b', 'c']\r\n * ```\r\n * @param {String} `str`\r\n * @param {Object} `options`\r\n * @return {String}\r\n * @api public\r\n */\r\n\r\nconst braces$1 = (input, options = {}) => {\r\n  let output = [];\r\n\r\n  if (Array.isArray(input)) {\r\n    for (let pattern of input) {\r\n      let result = braces$1.create(pattern, options);\r\n      if (Array.isArray(result)) {\r\n        output.push(...result);\r\n      } else {\r\n        output.push(result);\r\n      }\r\n    }\r\n  } else {\r\n    output = [].concat(braces$1.create(input, options));\r\n  }\r\n\r\n  if (options && options.expand === true && options.nodupes === true) {\r\n    output = [...new Set(output)];\r\n  }\r\n  return output;\r\n};\r\n\r\n/**\r\n * Parse the given `str` with the given `options`.\r\n *\r\n * ```js\r\n * // braces.parse(pattern, [, options]);\r\n * const ast = braces.parse('a/{b,c}/d');\r\n * console.log(ast);\r\n * ```\r\n * @param {String} pattern Brace pattern to parse\r\n * @param {Object} options\r\n * @return {Object} Returns an AST\r\n * @api public\r\n */\r\n\r\nbraces$1.parse = (input, options = {}) => parse(input, options);\r\n\r\n/**\r\n * Creates a braces string from an AST, or an AST node.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * let ast = braces.parse('foo/{a,b}/bar');\r\n * console.log(stringify(ast.nodes[2])); //=> '{a,b}'\r\n * ```\r\n * @param {String} `input` Brace pattern or AST.\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\r\n\r\nbraces$1.stringify = (input, options = {}) => {\r\n  if (typeof input === 'string') {\r\n    return stringify(braces$1.parse(input, options), options);\r\n  }\r\n  return stringify(input, options);\r\n};\r\n\r\n/**\r\n * Compiles a brace pattern into a regex-compatible, optimized string.\r\n * This method is called by the main [braces](#braces) function by default.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.compile('a/{b,c}/d'));\r\n * //=> ['a/(b|c)/d']\r\n * ```\r\n * @param {String} `input` Brace pattern or AST.\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\r\n\r\nbraces$1.compile = (input, options = {}) => {\r\n  if (typeof input === 'string') {\r\n    input = braces$1.parse(input, options);\r\n  }\r\n  return compile(input, options);\r\n};\r\n\r\n/**\r\n * Expands a brace pattern into an array. This method is called by the\r\n * main [braces](#braces) function when `options.expand` is true. Before\r\n * using this method it's recommended that you read the [performance notes](#performance))\r\n * and advantages of using [.compile](#compile) instead.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.expand('a/{b,c}/d'));\r\n * //=> ['a/b/d', 'a/c/d'];\r\n * ```\r\n * @param {String} `pattern` Brace pattern\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\r\n\r\nbraces$1.expand = (input, options = {}) => {\r\n  if (typeof input === 'string') {\r\n    input = braces$1.parse(input, options);\r\n  }\r\n\r\n  let result = expand(input, options);\r\n\r\n  // filter out empty strings if specified\r\n  if (options.noempty === true) {\r\n    result = result.filter(Boolean);\r\n  }\r\n\r\n  // filter out duplicates if specified\r\n  if (options.nodupes === true) {\r\n    result = [...new Set(result)];\r\n  }\r\n\r\n  return result;\r\n};\r\n\r\n/**\r\n * Processes a brace pattern and returns either an expanded array\r\n * (if `options.expand` is true), a highly optimized regex-compatible string.\r\n * This method is called by the main [braces](#braces) function.\r\n *\r\n * ```js\r\n * const braces = require('braces');\r\n * console.log(braces.create('user-{200..300}/project-{a,b,c}-{1..10}'))\r\n * //=> 'user-(20[0-9]|2[1-9][0-9]|300)/project-(a|b|c)-([1-9]|10)'\r\n * ```\r\n * @param {String} `pattern` Brace pattern\r\n * @param {Object} `options`\r\n * @return {Array} Returns an array of expanded values.\r\n * @api public\r\n */\r\n\r\nbraces$1.create = (input, options = {}) => {\r\n  if (input === '' || input.length < 3) {\r\n    return [input];\r\n  }\r\n\r\n return options.expand !== true\r\n    ? braces$1.compile(input, options)\r\n    : braces$1.expand(input, options);\r\n};\r\n\r\n/**\r\n * Expose \"braces\"\r\n */\r\n\r\nvar braces_1 = braces$1;\r\n\r\nconst require$$0 = [\r\n\t\"3dm\",\r\n\t\"3ds\",\r\n\t\"3g2\",\r\n\t\"3gp\",\r\n\t\"7z\",\r\n\t\"a\",\r\n\t\"aac\",\r\n\t\"adp\",\r\n\t\"ai\",\r\n\t\"aif\",\r\n\t\"aiff\",\r\n\t\"alz\",\r\n\t\"ape\",\r\n\t\"apk\",\r\n\t\"appimage\",\r\n\t\"ar\",\r\n\t\"arj\",\r\n\t\"asf\",\r\n\t\"au\",\r\n\t\"avi\",\r\n\t\"bak\",\r\n\t\"baml\",\r\n\t\"bh\",\r\n\t\"bin\",\r\n\t\"bk\",\r\n\t\"bmp\",\r\n\t\"btif\",\r\n\t\"bz2\",\r\n\t\"bzip2\",\r\n\t\"cab\",\r\n\t\"caf\",\r\n\t\"cgm\",\r\n\t\"class\",\r\n\t\"cmx\",\r\n\t\"cpio\",\r\n\t\"cr2\",\r\n\t\"cur\",\r\n\t\"dat\",\r\n\t\"dcm\",\r\n\t\"deb\",\r\n\t\"dex\",\r\n\t\"djvu\",\r\n\t\"dll\",\r\n\t\"dmg\",\r\n\t\"dng\",\r\n\t\"doc\",\r\n\t\"docm\",\r\n\t\"docx\",\r\n\t\"dot\",\r\n\t\"dotm\",\r\n\t\"dra\",\r\n\t\"DS_Store\",\r\n\t\"dsk\",\r\n\t\"dts\",\r\n\t\"dtshd\",\r\n\t\"dvb\",\r\n\t\"dwg\",\r\n\t\"dxf\",\r\n\t\"ecelp4800\",\r\n\t\"ecelp7470\",\r\n\t\"ecelp9600\",\r\n\t\"egg\",\r\n\t\"eol\",\r\n\t\"eot\",\r\n\t\"epub\",\r\n\t\"exe\",\r\n\t\"f4v\",\r\n\t\"fbs\",\r\n\t\"fh\",\r\n\t\"fla\",\r\n\t\"flac\",\r\n\t\"flatpak\",\r\n\t\"fli\",\r\n\t\"flv\",\r\n\t\"fpx\",\r\n\t\"fst\",\r\n\t\"fvt\",\r\n\t\"g3\",\r\n\t\"gh\",\r\n\t\"gif\",\r\n\t\"graffle\",\r\n\t\"gz\",\r\n\t\"gzip\",\r\n\t\"h261\",\r\n\t\"h263\",\r\n\t\"h264\",\r\n\t\"icns\",\r\n\t\"ico\",\r\n\t\"ief\",\r\n\t\"img\",\r\n\t\"ipa\",\r\n\t\"iso\",\r\n\t\"jar\",\r\n\t\"jpeg\",\r\n\t\"jpg\",\r\n\t\"jpgv\",\r\n\t\"jpm\",\r\n\t\"jxr\",\r\n\t\"key\",\r\n\t\"ktx\",\r\n\t\"lha\",\r\n\t\"lib\",\r\n\t\"lvp\",\r\n\t\"lz\",\r\n\t\"lzh\",\r\n\t\"lzma\",\r\n\t\"lzo\",\r\n\t\"m3u\",\r\n\t\"m4a\",\r\n\t\"m4v\",\r\n\t\"mar\",\r\n\t\"mdi\",\r\n\t\"mht\",\r\n\t\"mid\",\r\n\t\"midi\",\r\n\t\"mj2\",\r\n\t\"mka\",\r\n\t\"mkv\",\r\n\t\"mmr\",\r\n\t\"mng\",\r\n\t\"mobi\",\r\n\t\"mov\",\r\n\t\"movie\",\r\n\t\"mp3\",\r\n\t\"mp4\",\r\n\t\"mp4a\",\r\n\t\"mpeg\",\r\n\t\"mpg\",\r\n\t\"mpga\",\r\n\t\"mxu\",\r\n\t\"nef\",\r\n\t\"npx\",\r\n\t\"numbers\",\r\n\t\"nupkg\",\r\n\t\"o\",\r\n\t\"odp\",\r\n\t\"ods\",\r\n\t\"odt\",\r\n\t\"oga\",\r\n\t\"ogg\",\r\n\t\"ogv\",\r\n\t\"otf\",\r\n\t\"ott\",\r\n\t\"pages\",\r\n\t\"pbm\",\r\n\t\"pcx\",\r\n\t\"pdb\",\r\n\t\"pdf\",\r\n\t\"pea\",\r\n\t\"pgm\",\r\n\t\"pic\",\r\n\t\"png\",\r\n\t\"pnm\",\r\n\t\"pot\",\r\n\t\"potm\",\r\n\t\"potx\",\r\n\t\"ppa\",\r\n\t\"ppam\",\r\n\t\"ppm\",\r\n\t\"pps\",\r\n\t\"ppsm\",\r\n\t\"ppsx\",\r\n\t\"ppt\",\r\n\t\"pptm\",\r\n\t\"pptx\",\r\n\t\"psd\",\r\n\t\"pya\",\r\n\t\"pyc\",\r\n\t\"pyo\",\r\n\t\"pyv\",\r\n\t\"qt\",\r\n\t\"rar\",\r\n\t\"ras\",\r\n\t\"raw\",\r\n\t\"resources\",\r\n\t\"rgb\",\r\n\t\"rip\",\r\n\t\"rlc\",\r\n\t\"rmf\",\r\n\t\"rmvb\",\r\n\t\"rpm\",\r\n\t\"rtf\",\r\n\t\"rz\",\r\n\t\"s3m\",\r\n\t\"s7z\",\r\n\t\"scpt\",\r\n\t\"sgi\",\r\n\t\"shar\",\r\n\t\"snap\",\r\n\t\"sil\",\r\n\t\"sketch\",\r\n\t\"slk\",\r\n\t\"smv\",\r\n\t\"snk\",\r\n\t\"so\",\r\n\t\"stl\",\r\n\t\"suo\",\r\n\t\"sub\",\r\n\t\"swf\",\r\n\t\"tar\",\r\n\t\"tbz\",\r\n\t\"tbz2\",\r\n\t\"tga\",\r\n\t\"tgz\",\r\n\t\"thmx\",\r\n\t\"tif\",\r\n\t\"tiff\",\r\n\t\"tlz\",\r\n\t\"ttc\",\r\n\t\"ttf\",\r\n\t\"txz\",\r\n\t\"udf\",\r\n\t\"uvh\",\r\n\t\"uvi\",\r\n\t\"uvm\",\r\n\t\"uvp\",\r\n\t\"uvs\",\r\n\t\"uvu\",\r\n\t\"viv\",\r\n\t\"vob\",\r\n\t\"war\",\r\n\t\"wav\",\r\n\t\"wax\",\r\n\t\"wbmp\",\r\n\t\"wdp\",\r\n\t\"weba\",\r\n\t\"webm\",\r\n\t\"webp\",\r\n\t\"whl\",\r\n\t\"wim\",\r\n\t\"wm\",\r\n\t\"wma\",\r\n\t\"wmv\",\r\n\t\"wmx\",\r\n\t\"woff\",\r\n\t\"woff2\",\r\n\t\"wrm\",\r\n\t\"wvx\",\r\n\t\"xbm\",\r\n\t\"xif\",\r\n\t\"xla\",\r\n\t\"xlam\",\r\n\t\"xls\",\r\n\t\"xlsb\",\r\n\t\"xlsm\",\r\n\t\"xlsx\",\r\n\t\"xlt\",\r\n\t\"xltm\",\r\n\t\"xltx\",\r\n\t\"xm\",\r\n\t\"xmind\",\r\n\t\"xpi\",\r\n\t\"xpm\",\r\n\t\"xwd\",\r\n\t\"xz\",\r\n\t\"z\",\r\n\t\"zip\",\r\n\t\"zipx\"\r\n];\r\n\r\nvar binaryExtensions$1 = require$$0;\r\n\r\nconst path = require$$0$2;\r\nconst binaryExtensions = binaryExtensions$1;\r\n\r\nconst extensions = new Set(binaryExtensions);\r\n\r\nvar isBinaryPath$1 = filePath => extensions.has(path.extname(filePath).slice(1).toLowerCase());\r\n\r\nvar constants = {};\r\n\r\n(function (exports) {\r\n\r\n\tconst {sep} = require$$0$2;\r\n\tconst {platform} = process;\r\n\tconst os = require$$2$1;\r\n\r\n\texports.EV_ALL = 'all';\r\n\texports.EV_READY = 'ready';\r\n\texports.EV_ADD = 'add';\r\n\texports.EV_CHANGE = 'change';\r\n\texports.EV_ADD_DIR = 'addDir';\r\n\texports.EV_UNLINK = 'unlink';\r\n\texports.EV_UNLINK_DIR = 'unlinkDir';\r\n\texports.EV_RAW = 'raw';\r\n\texports.EV_ERROR = 'error';\r\n\r\n\texports.STR_DATA = 'data';\r\n\texports.STR_END = 'end';\r\n\texports.STR_CLOSE = 'close';\r\n\r\n\texports.FSEVENT_CREATED = 'created';\r\n\texports.FSEVENT_MODIFIED = 'modified';\r\n\texports.FSEVENT_DELETED = 'deleted';\r\n\texports.FSEVENT_MOVED = 'moved';\r\n\texports.FSEVENT_CLONED = 'cloned';\r\n\texports.FSEVENT_UNKNOWN = 'unknown';\r\n\texports.FSEVENT_FLAG_MUST_SCAN_SUBDIRS = 1;\r\n\texports.FSEVENT_TYPE_FILE = 'file';\r\n\texports.FSEVENT_TYPE_DIRECTORY = 'directory';\r\n\texports.FSEVENT_TYPE_SYMLINK = 'symlink';\r\n\r\n\texports.KEY_LISTENERS = 'listeners';\r\n\texports.KEY_ERR = 'errHandlers';\r\n\texports.KEY_RAW = 'rawEmitters';\r\n\texports.HANDLER_KEYS = [exports.KEY_LISTENERS, exports.KEY_ERR, exports.KEY_RAW];\r\n\r\n\texports.DOT_SLASH = `.${sep}`;\r\n\r\n\texports.BACK_SLASH_RE = /\\\\/g;\r\n\texports.DOUBLE_SLASH_RE = /\\/\\//;\r\n\texports.SLASH_OR_BACK_SLASH_RE = /[/\\\\]/;\r\n\texports.DOT_RE = /\\..*\\.(sw[px])$|~$|\\.subl.*\\.tmp/;\r\n\texports.REPLACER_RE = /^\\.[/\\\\]/;\r\n\r\n\texports.SLASH = '/';\r\n\texports.SLASH_SLASH = '//';\r\n\texports.BRACE_START = '{';\r\n\texports.BANG = '!';\r\n\texports.ONE_DOT = '.';\r\n\texports.TWO_DOTS = '..';\r\n\texports.STAR = '*';\r\n\texports.GLOBSTAR = '**';\r\n\texports.ROOT_GLOBSTAR = '/**/*';\r\n\texports.SLASH_GLOBSTAR = '/**';\r\n\texports.DIR_SUFFIX = 'Dir';\r\n\texports.ANYMATCH_OPTS = {dot: true};\r\n\texports.STRING_TYPE = 'string';\r\n\texports.FUNCTION_TYPE = 'function';\r\n\texports.EMPTY_STR = '';\r\n\texports.EMPTY_FN = () => {};\r\n\texports.IDENTITY_FN = val => val;\r\n\r\n\texports.isWindows = platform === 'win32';\r\n\texports.isMacos = platform === 'darwin';\r\n\texports.isLinux = platform === 'linux';\r\n\texports.isIBMi = os.type() === 'OS400'; \r\n} (constants));\r\n\r\nconst fs$2 = require$$0$1;\r\nconst sysPath$2 = require$$0$2;\r\nconst { promisify: promisify$2 } = require$$2;\r\nconst isBinaryPath = isBinaryPath$1;\r\nconst {\r\n  isWindows: isWindows$1,\r\n  isLinux,\r\n  EMPTY_FN: EMPTY_FN$2,\r\n  EMPTY_STR: EMPTY_STR$1,\r\n  KEY_LISTENERS,\r\n  KEY_ERR,\r\n  KEY_RAW,\r\n  HANDLER_KEYS,\r\n  EV_CHANGE: EV_CHANGE$2,\r\n  EV_ADD: EV_ADD$2,\r\n  EV_ADD_DIR: EV_ADD_DIR$2,\r\n  EV_ERROR: EV_ERROR$2,\r\n  STR_DATA: STR_DATA$1,\r\n  STR_END: STR_END$2,\r\n  BRACE_START: BRACE_START$1,\r\n  STAR\r\n} = constants;\r\n\r\nconst THROTTLE_MODE_WATCH = 'watch';\r\n\r\nconst open = promisify$2(fs$2.open);\r\nconst stat$2 = promisify$2(fs$2.stat);\r\nconst lstat$1 = promisify$2(fs$2.lstat);\r\nconst close = promisify$2(fs$2.close);\r\nconst fsrealpath = promisify$2(fs$2.realpath);\r\n\r\nconst statMethods$1 = { lstat: lstat$1, stat: stat$2 };\r\n\r\n// TODO: emit errors properly. Example: EMFILE on Macos.\r\nconst foreach = (val, fn) => {\r\n  if (val instanceof Set) {\r\n    val.forEach(fn);\r\n  } else {\r\n    fn(val);\r\n  }\r\n};\r\n\r\nconst addAndConvert = (main, prop, item) => {\r\n  let container = main[prop];\r\n  if (!(container instanceof Set)) {\r\n    main[prop] = container = new Set([container]);\r\n  }\r\n  container.add(item);\r\n};\r\n\r\nconst clearItem = cont => key => {\r\n  const set = cont[key];\r\n  if (set instanceof Set) {\r\n    set.clear();\r\n  } else {\r\n    delete cont[key];\r\n  }\r\n};\r\n\r\nconst delFromSet = (main, prop, item) => {\r\n  const container = main[prop];\r\n  if (container instanceof Set) {\r\n    container.delete(item);\r\n  } else if (container === item) {\r\n    delete main[prop];\r\n  }\r\n};\r\n\r\nconst isEmptySet = (val) => val instanceof Set ? val.size === 0 : !val;\r\n\r\n/**\r\n * @typedef {String} Path\r\n */\r\n\r\n// fs_watch helpers\r\n\r\n// object to hold per-process fs_watch instances\r\n// (may be shared across chokidar FSWatcher instances)\r\n\r\n/**\r\n * @typedef {Object} FsWatchContainer\r\n * @property {Set} listeners\r\n * @property {Set} errHandlers\r\n * @property {Set} rawEmitters\r\n * @property {fs.FSWatcher=} watcher\r\n * @property {Boolean=} watcherUnusable\r\n */\r\n\r\n/**\r\n * @type {Map<String,FsWatchContainer>}\r\n */\r\nconst FsWatchInstances = new Map();\r\n\r\n/**\r\n * Instantiates the fs_watch interface\r\n * @param {String} path to be watched\r\n * @param {Object} options to be passed to fs_watch\r\n * @param {Function} listener main event handler\r\n * @param {Function} errHandler emits info about errors\r\n * @param {Function} emitRaw emits raw event data\r\n * @returns {fs.FSWatcher} new fsevents instance\r\n */\r\nfunction createFsWatchInstance(path, options, listener, errHandler, emitRaw) {\r\n  const handleEvent = (rawEvent, evPath) => {\r\n    listener(path);\r\n    emitRaw(rawEvent, evPath, {watchedPath: path});\r\n\r\n    // emit based on events occurring for files from a directory's watcher in\r\n    // case the file's watcher misses it (and rely on throttling to de-dupe)\r\n    if (evPath && path !== evPath) {\r\n      fsWatchBroadcast(\r\n        sysPath$2.resolve(path, evPath), KEY_LISTENERS, sysPath$2.join(path, evPath)\r\n      );\r\n    }\r\n  };\r\n  try {\r\n    return fs$2.watch(path, options, handleEvent);\r\n  } catch (error) {\r\n    errHandler(error);\r\n  }\r\n}\r\n\r\n/**\r\n * Helper for passing fs_watch event data to a collection of listeners\r\n * @param {Path} fullPath absolute path bound to fs_watch instance\r\n * @param {String} type listener type\r\n * @param {*=} val1 arguments to be passed to listeners\r\n * @param {*=} val2\r\n * @param {*=} val3\r\n */\r\nconst fsWatchBroadcast = (fullPath, type, val1, val2, val3) => {\r\n  const cont = FsWatchInstances.get(fullPath);\r\n  if (!cont) return;\r\n  foreach(cont[type], (listener) => {\r\n    listener(val1, val2, val3);\r\n  });\r\n};\r\n\r\n/**\r\n * Instantiates the fs_watch interface or binds listeners\r\n * to an existing one covering the same file system entry\r\n * @param {String} path\r\n * @param {String} fullPath absolute path\r\n * @param {Object} options to be passed to fs_watch\r\n * @param {Object} handlers container for event listener functions\r\n */\r\nconst setFsWatchListener = (path, fullPath, options, handlers) => {\r\n  const {listener, errHandler, rawEmitter} = handlers;\r\n  let cont = FsWatchInstances.get(fullPath);\r\n\r\n  /** @type {fs.FSWatcher=} */\r\n  let watcher;\r\n  if (!options.persistent) {\r\n    watcher = createFsWatchInstance(\r\n      path, options, listener, errHandler, rawEmitter\r\n    );\r\n    return watcher.close.bind(watcher);\r\n  }\r\n  if (cont) {\r\n    addAndConvert(cont, KEY_LISTENERS, listener);\r\n    addAndConvert(cont, KEY_ERR, errHandler);\r\n    addAndConvert(cont, KEY_RAW, rawEmitter);\r\n  } else {\r\n    watcher = createFsWatchInstance(\r\n      path,\r\n      options,\r\n      fsWatchBroadcast.bind(null, fullPath, KEY_LISTENERS),\r\n      errHandler, // no need to use broadcast here\r\n      fsWatchBroadcast.bind(null, fullPath, KEY_RAW)\r\n    );\r\n    if (!watcher) return;\r\n    watcher.on(EV_ERROR$2, async (error) => {\r\n      const broadcastErr = fsWatchBroadcast.bind(null, fullPath, KEY_ERR);\r\n      cont.watcherUnusable = true; // documented since Node 10.4.1\r\n      // Workaround for https://github.com/joyent/node/issues/4337\r\n      if (isWindows$1 && error.code === 'EPERM') {\r\n        try {\r\n          const fd = await open(path, 'r');\r\n          await close(fd);\r\n          broadcastErr(error);\r\n        } catch (err) {}\r\n      } else {\r\n        broadcastErr(error);\r\n      }\r\n    });\r\n    cont = {\r\n      listeners: listener,\r\n      errHandlers: errHandler,\r\n      rawEmitters: rawEmitter,\r\n      watcher\r\n    };\r\n    FsWatchInstances.set(fullPath, cont);\r\n  }\r\n  // const index = cont.listeners.indexOf(listener);\r\n\r\n  // removes this instance's listeners and closes the underlying fs_watch\r\n  // instance if there are no more listeners left\r\n  return () => {\r\n    delFromSet(cont, KEY_LISTENERS, listener);\r\n    delFromSet(cont, KEY_ERR, errHandler);\r\n    delFromSet(cont, KEY_RAW, rawEmitter);\r\n    if (isEmptySet(cont.listeners)) {\r\n      // Check to protect against issue gh-730.\r\n      // if (cont.watcherUnusable) {\r\n      cont.watcher.close();\r\n      // }\r\n      FsWatchInstances.delete(fullPath);\r\n      HANDLER_KEYS.forEach(clearItem(cont));\r\n      cont.watcher = undefined;\r\n      Object.freeze(cont);\r\n    }\r\n  };\r\n};\r\n\r\n// fs_watchFile helpers\r\n\r\n// object to hold per-process fs_watchFile instances\r\n// (may be shared across chokidar FSWatcher instances)\r\nconst FsWatchFileInstances = new Map();\r\n\r\n/**\r\n * Instantiates the fs_watchFile interface or binds listeners\r\n * to an existing one covering the same file system entry\r\n * @param {String} path to be watched\r\n * @param {String} fullPath absolute path\r\n * @param {Object} options options to be passed to fs_watchFile\r\n * @param {Object} handlers container for event listener functions\r\n * @returns {Function} closer\r\n */\r\nconst setFsWatchFileListener = (path, fullPath, options, handlers) => {\r\n  const {listener, rawEmitter} = handlers;\r\n  let cont = FsWatchFileInstances.get(fullPath);\r\n\r\n  const copts = cont && cont.options;\r\n  if (copts && (copts.persistent < options.persistent || copts.interval > options.interval)) {\r\n    fs$2.unwatchFile(fullPath);\r\n    cont = undefined;\r\n  }\r\n\r\n  /* eslint-enable no-unused-vars, prefer-destructuring */\r\n\r\n  if (cont) {\r\n    addAndConvert(cont, KEY_LISTENERS, listener);\r\n    addAndConvert(cont, KEY_RAW, rawEmitter);\r\n  } else {\r\n    // TODO\r\n    // listeners.add(listener);\r\n    // rawEmitters.add(rawEmitter);\r\n    cont = {\r\n      listeners: listener,\r\n      rawEmitters: rawEmitter,\r\n      options,\r\n      watcher: fs$2.watchFile(fullPath, options, (curr, prev) => {\r\n        foreach(cont.rawEmitters, (rawEmitter) => {\r\n          rawEmitter(EV_CHANGE$2, fullPath, {curr, prev});\r\n        });\r\n        const currmtime = curr.mtimeMs;\r\n        if (curr.size !== prev.size || currmtime > prev.mtimeMs || currmtime === 0) {\r\n          foreach(cont.listeners, (listener) => listener(path, curr));\r\n        }\r\n      })\r\n    };\r\n    FsWatchFileInstances.set(fullPath, cont);\r\n  }\r\n  // const index = cont.listeners.indexOf(listener);\r\n\r\n  // Removes this instance's listeners and closes the underlying fs_watchFile\r\n  // instance if there are no more listeners left.\r\n  return () => {\r\n    delFromSet(cont, KEY_LISTENERS, listener);\r\n    delFromSet(cont, KEY_RAW, rawEmitter);\r\n    if (isEmptySet(cont.listeners)) {\r\n      FsWatchFileInstances.delete(fullPath);\r\n      fs$2.unwatchFile(fullPath);\r\n      cont.options = cont.watcher = undefined;\r\n      Object.freeze(cont);\r\n    }\r\n  };\r\n};\r\n\r\n/**\r\n * @mixin\r\n */\r\nlet NodeFsHandler$1 = class NodeFsHandler {\r\n\r\n/**\r\n * @param {import(\"../index\").FSWatcher} fsW\r\n */\r\nconstructor(fsW) {\r\n  this.fsw = fsW;\r\n  this._boundHandleError = (error) => fsW._handleError(error);\r\n}\r\n\r\n/**\r\n * Watch file for changes with fs_watchFile or fs_watch.\r\n * @param {String} path to file or dir\r\n * @param {Function} listener on fs change\r\n * @returns {Function} closer for the watcher instance\r\n */\r\n_watchWithNodeFs(path, listener) {\r\n  const opts = this.fsw.options;\r\n  const directory = sysPath$2.dirname(path);\r\n  const basename = sysPath$2.basename(path);\r\n  const parent = this.fsw._getWatchedDir(directory);\r\n  parent.add(basename);\r\n  const absolutePath = sysPath$2.resolve(path);\r\n  const options = {persistent: opts.persistent};\r\n  if (!listener) listener = EMPTY_FN$2;\r\n\r\n  let closer;\r\n  if (opts.usePolling) {\r\n    options.interval = opts.enableBinaryInterval && isBinaryPath(basename) ?\r\n      opts.binaryInterval : opts.interval;\r\n    closer = setFsWatchFileListener(path, absolutePath, options, {\r\n      listener,\r\n      rawEmitter: this.fsw._emitRaw\r\n    });\r\n  } else {\r\n    closer = setFsWatchListener(path, absolutePath, options, {\r\n      listener,\r\n      errHandler: this._boundHandleError,\r\n      rawEmitter: this.fsw._emitRaw\r\n    });\r\n  }\r\n  return closer;\r\n}\r\n\r\n/**\r\n * Watch a file and emit add event if warranted.\r\n * @param {Path} file Path\r\n * @param {fs.Stats} stats result of fs_stat\r\n * @param {Boolean} initialAdd was the file added at watch instantiation?\r\n * @returns {Function} closer for the watcher instance\r\n */\r\n_handleFile(file, stats, initialAdd) {\r\n  if (this.fsw.closed) {\r\n    return;\r\n  }\r\n  const dirname = sysPath$2.dirname(file);\r\n  const basename = sysPath$2.basename(file);\r\n  const parent = this.fsw._getWatchedDir(dirname);\r\n  // stats is always present\r\n  let prevStats = stats;\r\n\r\n  // if the file is already being watched, do nothing\r\n  if (parent.has(basename)) return;\r\n\r\n  const listener = async (path, newStats) => {\r\n    if (!this.fsw._throttle(THROTTLE_MODE_WATCH, file, 5)) return;\r\n    if (!newStats || newStats.mtimeMs === 0) {\r\n      try {\r\n        const newStats = await stat$2(file);\r\n        if (this.fsw.closed) return;\r\n        // Check that change event was not fired because of changed only accessTime.\r\n        const at = newStats.atimeMs;\r\n        const mt = newStats.mtimeMs;\r\n        if (!at || at <= mt || mt !== prevStats.mtimeMs) {\r\n          this.fsw._emit(EV_CHANGE$2, file, newStats);\r\n        }\r\n        if (isLinux && prevStats.ino !== newStats.ino) {\r\n          this.fsw._closeFile(path);\r\n          prevStats = newStats;\r\n          this.fsw._addPathCloser(path, this._watchWithNodeFs(file, listener));\r\n        } else {\r\n          prevStats = newStats;\r\n        }\r\n      } catch (error) {\r\n        // Fix issues where mtime is null but file is still present\r\n        this.fsw._remove(dirname, basename);\r\n      }\r\n      // add is about to be emitted if file not already tracked in parent\r\n    } else if (parent.has(basename)) {\r\n      // Check that change event was not fired because of changed only accessTime.\r\n      const at = newStats.atimeMs;\r\n      const mt = newStats.mtimeMs;\r\n      if (!at || at <= mt || mt !== prevStats.mtimeMs) {\r\n        this.fsw._emit(EV_CHANGE$2, file, newStats);\r\n      }\r\n      prevStats = newStats;\r\n    }\r\n  };\r\n  // kick off the watcher\r\n  const closer = this._watchWithNodeFs(file, listener);\r\n\r\n  // emit an add event if we're supposed to\r\n  if (!(initialAdd && this.fsw.options.ignoreInitial) && this.fsw._isntIgnored(file)) {\r\n    if (!this.fsw._throttle(EV_ADD$2, file, 0)) return;\r\n    this.fsw._emit(EV_ADD$2, file, stats);\r\n  }\r\n\r\n  return closer;\r\n}\r\n\r\n/**\r\n * Handle symlinks encountered while reading a dir.\r\n * @param {Object} entry returned by readdirp\r\n * @param {String} directory path of dir being read\r\n * @param {String} path of this item\r\n * @param {String} item basename of this item\r\n * @returns {Promise<Boolean>} true if no more processing is needed for this entry.\r\n */\r\nasync _handleSymlink(entry, directory, path, item) {\r\n  if (this.fsw.closed) {\r\n    return;\r\n  }\r\n  const full = entry.fullPath;\r\n  const dir = this.fsw._getWatchedDir(directory);\r\n\r\n  if (!this.fsw.options.followSymlinks) {\r\n    // watch symlink directly (don't follow) and detect changes\r\n    this.fsw._incrReadyCount();\r\n\r\n    let linkPath;\r\n    try {\r\n      linkPath = await fsrealpath(path);\r\n    } catch (e) {\r\n      this.fsw._emitReady();\r\n      return true;\r\n    }\r\n\r\n    if (this.fsw.closed) return;\r\n    if (dir.has(item)) {\r\n      if (this.fsw._symlinkPaths.get(full) !== linkPath) {\r\n        this.fsw._symlinkPaths.set(full, linkPath);\r\n        this.fsw._emit(EV_CHANGE$2, path, entry.stats);\r\n      }\r\n    } else {\r\n      dir.add(item);\r\n      this.fsw._symlinkPaths.set(full, linkPath);\r\n      this.fsw._emit(EV_ADD$2, path, entry.stats);\r\n    }\r\n    this.fsw._emitReady();\r\n    return true;\r\n  }\r\n\r\n  // don't follow the same symlink more than once\r\n  if (this.fsw._symlinkPaths.has(full)) {\r\n    return true;\r\n  }\r\n\r\n  this.fsw._symlinkPaths.set(full, true);\r\n}\r\n\r\n_handleRead(directory, initialAdd, wh, target, dir, depth, throttler) {\r\n  // Normalize the directory name on Windows\r\n  directory = sysPath$2.join(directory, EMPTY_STR$1);\r\n\r\n  if (!wh.hasGlob) {\r\n    throttler = this.fsw._throttle('readdir', directory, 1000);\r\n    if (!throttler) return;\r\n  }\r\n\r\n  const previous = this.fsw._getWatchedDir(wh.path);\r\n  const current = new Set();\r\n\r\n  let stream = this.fsw._readdirp(directory, {\r\n    fileFilter: entry => wh.filterPath(entry),\r\n    directoryFilter: entry => wh.filterDir(entry),\r\n    depth: 0\r\n  }).on(STR_DATA$1, async (entry) => {\r\n    if (this.fsw.closed) {\r\n      stream = undefined;\r\n      return;\r\n    }\r\n    const item = entry.path;\r\n    let path = sysPath$2.join(directory, item);\r\n    current.add(item);\r\n\r\n    if (entry.stats.isSymbolicLink() && await this._handleSymlink(entry, directory, path, item)) {\r\n      return;\r\n    }\r\n\r\n    if (this.fsw.closed) {\r\n      stream = undefined;\r\n      return;\r\n    }\r\n    // Files that present in current directory snapshot\r\n    // but absent in previous are added to watch list and\r\n    // emit `add` event.\r\n    if (item === target || !target && !previous.has(item)) {\r\n      this.fsw._incrReadyCount();\r\n\r\n      // ensure relativeness of path is preserved in case of watcher reuse\r\n      path = sysPath$2.join(dir, sysPath$2.relative(dir, path));\r\n\r\n      this._addToNodeFs(path, initialAdd, wh, depth + 1);\r\n    }\r\n  }).on(EV_ERROR$2, this._boundHandleError);\r\n\r\n  return new Promise(resolve =>\r\n    stream.once(STR_END$2, () => {\r\n      if (this.fsw.closed) {\r\n        stream = undefined;\r\n        return;\r\n      }\r\n      const wasThrottled = throttler ? throttler.clear() : false;\r\n\r\n      resolve();\r\n\r\n      // Files that absent in current directory snapshot\r\n      // but present in previous emit `remove` event\r\n      // and are removed from @watched[directory].\r\n      previous.getChildren().filter((item) => {\r\n        return item !== directory &&\r\n          !current.has(item) &&\r\n          // in case of intersecting globs;\r\n          // a path may have been filtered out of this readdir, but\r\n          // shouldn't be removed because it matches a different glob\r\n          (!wh.hasGlob || wh.filterPath({\r\n            fullPath: sysPath$2.resolve(directory, item)\r\n          }));\r\n      }).forEach((item) => {\r\n        this.fsw._remove(directory, item);\r\n      });\r\n\r\n      stream = undefined;\r\n\r\n      // one more time for any missed in case changes came in extremely quickly\r\n      if (wasThrottled) this._handleRead(directory, false, wh, target, dir, depth, throttler);\r\n    })\r\n  );\r\n}\r\n\r\n/**\r\n * Read directory to add / remove files from `@watched` list and re-read it on change.\r\n * @param {String} dir fs path\r\n * @param {fs.Stats} stats\r\n * @param {Boolean} initialAdd\r\n * @param {Number} depth relative to user-supplied path\r\n * @param {String} target child path targeted for watch\r\n * @param {Object} wh Common watch helpers for this path\r\n * @param {String} realpath\r\n * @returns {Promise<Function>} closer for the watcher instance.\r\n */\r\nasync _handleDir(dir, stats, initialAdd, depth, target, wh, realpath) {\r\n  const parentDir = this.fsw._getWatchedDir(sysPath$2.dirname(dir));\r\n  const tracked = parentDir.has(sysPath$2.basename(dir));\r\n  if (!(initialAdd && this.fsw.options.ignoreInitial) && !target && !tracked) {\r\n    if (!wh.hasGlob || wh.globFilter(dir)) this.fsw._emit(EV_ADD_DIR$2, dir, stats);\r\n  }\r\n\r\n  // ensure dir is tracked (harmless if redundant)\r\n  parentDir.add(sysPath$2.basename(dir));\r\n  this.fsw._getWatchedDir(dir);\r\n  let throttler;\r\n  let closer;\r\n\r\n  const oDepth = this.fsw.options.depth;\r\n  if ((oDepth == null || depth <= oDepth) && !this.fsw._symlinkPaths.has(realpath)) {\r\n    if (!target) {\r\n      await this._handleRead(dir, initialAdd, wh, target, dir, depth, throttler);\r\n      if (this.fsw.closed) return;\r\n    }\r\n\r\n    closer = this._watchWithNodeFs(dir, (dirPath, stats) => {\r\n      // if current directory is removed, do nothing\r\n      if (stats && stats.mtimeMs === 0) return;\r\n\r\n      this._handleRead(dirPath, false, wh, target, dir, depth, throttler);\r\n    });\r\n  }\r\n  return closer;\r\n}\r\n\r\n/**\r\n * Handle added file, directory, or glob pattern.\r\n * Delegates call to _handleFile / _handleDir after checks.\r\n * @param {String} path to file or ir\r\n * @param {Boolean} initialAdd was the file added at watch instantiation?\r\n * @param {Object} priorWh depth relative to user-supplied path\r\n * @param {Number} depth Child path actually targeted for watch\r\n * @param {String=} target Child path actually targeted for watch\r\n * @returns {Promise}\r\n */\r\nasync _addToNodeFs(path, initialAdd, priorWh, depth, target) {\r\n  const ready = this.fsw._emitReady;\r\n  if (this.fsw._isIgnored(path) || this.fsw.closed) {\r\n    ready();\r\n    return false;\r\n  }\r\n\r\n  const wh = this.fsw._getWatchHelpers(path, depth);\r\n  if (!wh.hasGlob && priorWh) {\r\n    wh.hasGlob = priorWh.hasGlob;\r\n    wh.globFilter = priorWh.globFilter;\r\n    wh.filterPath = entry => priorWh.filterPath(entry);\r\n    wh.filterDir = entry => priorWh.filterDir(entry);\r\n  }\r\n\r\n  // evaluate what is at the path we're being asked to watch\r\n  try {\r\n    const stats = await statMethods$1[wh.statMethod](wh.watchPath);\r\n    if (this.fsw.closed) return;\r\n    if (this.fsw._isIgnored(wh.watchPath, stats)) {\r\n      ready();\r\n      return false;\r\n    }\r\n\r\n    const follow = this.fsw.options.followSymlinks && !path.includes(STAR) && !path.includes(BRACE_START$1);\r\n    let closer;\r\n    if (stats.isDirectory()) {\r\n      const absPath = sysPath$2.resolve(path);\r\n      const targetPath = follow ? await fsrealpath(path) : path;\r\n      if (this.fsw.closed) return;\r\n      closer = await this._handleDir(wh.watchPath, stats, initialAdd, depth, target, wh, targetPath);\r\n      if (this.fsw.closed) return;\r\n      // preserve this symlink's target path\r\n      if (absPath !== targetPath && targetPath !== undefined) {\r\n        this.fsw._symlinkPaths.set(absPath, targetPath);\r\n      }\r\n    } else if (stats.isSymbolicLink()) {\r\n      const targetPath = follow ? await fsrealpath(path) : path;\r\n      if (this.fsw.closed) return;\r\n      const parent = sysPath$2.dirname(wh.watchPath);\r\n      this.fsw._getWatchedDir(parent).add(wh.watchPath);\r\n      this.fsw._emit(EV_ADD$2, wh.watchPath, stats);\r\n      closer = await this._handleDir(parent, stats, initialAdd, depth, path, wh, targetPath);\r\n      if (this.fsw.closed) return;\r\n\r\n      // preserve this symlink's target path\r\n      if (targetPath !== undefined) {\r\n        this.fsw._symlinkPaths.set(sysPath$2.resolve(path), targetPath);\r\n      }\r\n    } else {\r\n      closer = this._handleFile(wh.watchPath, stats, initialAdd);\r\n    }\r\n    ready();\r\n\r\n    this.fsw._addPathCloser(path, closer);\r\n    return false;\r\n\r\n  } catch (error) {\r\n    if (this.fsw._handleError(error)) {\r\n      ready();\r\n      return path;\r\n    }\r\n  }\r\n}\r\n\r\n};\r\n\r\nvar nodefsHandler = NodeFsHandler$1;\r\n\r\nvar fseventsHandler = {exports: {}};\r\n\r\nconst require$$3 = /*@__PURE__*/getAugmentedNamespace(fseventsImporter);\r\n\r\nconst fs$1 = require$$0$1;\r\nconst sysPath$1 = require$$0$2;\r\nconst { promisify: promisify$1 } = require$$2;\r\n\r\nlet fsevents;\r\ntry {\r\n  fsevents = require$$3.getFsEvents();\r\n} catch (error) {\r\n  if (process.env.CHOKIDAR_PRINT_FSEVENTS_REQUIRE_ERROR) console.error(error);\r\n}\r\n\r\nif (fsevents) {\r\n  // TODO: real check\r\n  const mtch = process.version.match(/v(\\d+)\\.(\\d+)/);\r\n  if (mtch && mtch[1] && mtch[2]) {\r\n    const maj = Number.parseInt(mtch[1], 10);\r\n    const min = Number.parseInt(mtch[2], 10);\r\n    if (maj === 8 && min < 16) {\r\n      fsevents = undefined;\r\n    }\r\n  }\r\n}\r\n\r\nconst {\r\n  EV_ADD: EV_ADD$1,\r\n  EV_CHANGE: EV_CHANGE$1,\r\n  EV_ADD_DIR: EV_ADD_DIR$1,\r\n  EV_UNLINK: EV_UNLINK$1,\r\n  EV_ERROR: EV_ERROR$1,\r\n  STR_DATA,\r\n  STR_END: STR_END$1,\r\n  FSEVENT_CREATED,\r\n  FSEVENT_MODIFIED,\r\n  FSEVENT_DELETED,\r\n  FSEVENT_MOVED,\r\n  // FSEVENT_CLONED,\r\n  FSEVENT_UNKNOWN,\r\n  FSEVENT_FLAG_MUST_SCAN_SUBDIRS,\r\n  FSEVENT_TYPE_FILE,\r\n  FSEVENT_TYPE_DIRECTORY,\r\n  FSEVENT_TYPE_SYMLINK,\r\n\r\n  ROOT_GLOBSTAR,\r\n  DIR_SUFFIX,\r\n  DOT_SLASH,\r\n  FUNCTION_TYPE: FUNCTION_TYPE$1,\r\n  EMPTY_FN: EMPTY_FN$1,\r\n  IDENTITY_FN\r\n} = constants;\r\n\r\nconst Depth = (value) => isNaN(value) ? {} : {depth: value};\r\n\r\nconst stat$1 = promisify$1(fs$1.stat);\r\nconst lstat = promisify$1(fs$1.lstat);\r\nconst realpath = promisify$1(fs$1.realpath);\r\n\r\nconst statMethods = { stat: stat$1, lstat };\r\n\r\n/**\r\n * @typedef {String} Path\r\n */\r\n\r\n/**\r\n * @typedef {Object} FsEventsWatchContainer\r\n * @property {Set<Function>} listeners\r\n * @property {Function} rawEmitter\r\n * @property {{stop: Function}} watcher\r\n */\r\n\r\n// fsevents instance helper functions\r\n/**\r\n * Object to hold per-process fsevents instances (may be shared across chokidar FSWatcher instances)\r\n * @type {Map<Path,FsEventsWatchContainer>}\r\n */\r\nconst FSEventsWatchers = new Map();\r\n\r\n// Threshold of duplicate path prefixes at which to start\r\n// consolidating going forward\r\nconst consolidateThreshhold = 10;\r\n\r\nconst wrongEventFlags = new Set([\r\n  69888, 70400, 71424, 72704, 73472, 131328, 131840, 262912\r\n]);\r\n\r\n/**\r\n * Instantiates the fsevents interface\r\n * @param {Path} path path to be watched\r\n * @param {Function} callback called when fsevents is bound and ready\r\n * @returns {{stop: Function}} new fsevents instance\r\n */\r\nconst createFSEventsInstance = (path, callback) => {\r\n  const stop = fsevents.watch(path, callback);\r\n  return {stop};\r\n};\r\n\r\n/**\r\n * Instantiates the fsevents interface or binds listeners to an existing one covering\r\n * the same file tree.\r\n * @param {Path} path           - to be watched\r\n * @param {Path} realPath       - real path for symlinks\r\n * @param {Function} listener   - called when fsevents emits events\r\n * @param {Function} rawEmitter - passes data to listeners of the 'raw' event\r\n * @returns {Function} closer\r\n */\r\nfunction setFSEventsListener(path, realPath, listener, rawEmitter) {\r\n  let watchPath = sysPath$1.extname(realPath) ? sysPath$1.dirname(realPath) : realPath;\r\n\r\n  const parentPath = sysPath$1.dirname(watchPath);\r\n  let cont = FSEventsWatchers.get(watchPath);\r\n\r\n  // If we've accumulated a substantial number of paths that\r\n  // could have been consolidated by watching one directory\r\n  // above the current one, create a watcher on the parent\r\n  // path instead, so that we do consolidate going forward.\r\n  if (couldConsolidate(parentPath)) {\r\n    watchPath = parentPath;\r\n  }\r\n\r\n  const resolvedPath = sysPath$1.resolve(path);\r\n  const hasSymlink = resolvedPath !== realPath;\r\n\r\n  const filteredListener = (fullPath, flags, info) => {\r\n    if (hasSymlink) fullPath = fullPath.replace(realPath, resolvedPath);\r\n    if (\r\n      fullPath === resolvedPath ||\r\n      !fullPath.indexOf(resolvedPath + sysPath$1.sep)\r\n    ) listener(fullPath, flags, info);\r\n  };\r\n\r\n  // check if there is already a watcher on a parent path\r\n  // modifies `watchPath` to the parent path when it finds a match\r\n  let watchedParent = false;\r\n  for (const watchedPath of FSEventsWatchers.keys()) {\r\n    if (realPath.indexOf(sysPath$1.resolve(watchedPath) + sysPath$1.sep) === 0) {\r\n      watchPath = watchedPath;\r\n      cont = FSEventsWatchers.get(watchPath);\r\n      watchedParent = true;\r\n      break;\r\n    }\r\n  }\r\n\r\n  if (cont || watchedParent) {\r\n    cont.listeners.add(filteredListener);\r\n  } else {\r\n    cont = {\r\n      listeners: new Set([filteredListener]),\r\n      rawEmitter,\r\n      watcher: createFSEventsInstance(watchPath, (fullPath, flags) => {\r\n        if (!cont.listeners.size) return;\r\n        if (flags & FSEVENT_FLAG_MUST_SCAN_SUBDIRS) return;\r\n        const info = fsevents.getInfo(fullPath, flags);\r\n        cont.listeners.forEach(list => {\r\n          list(fullPath, flags, info);\r\n        });\r\n\r\n        cont.rawEmitter(info.event, fullPath, info);\r\n      })\r\n    };\r\n    FSEventsWatchers.set(watchPath, cont);\r\n  }\r\n\r\n  // removes this instance's listeners and closes the underlying fsevents\r\n  // instance if there are no more listeners left\r\n  return () => {\r\n    const lst = cont.listeners;\r\n\r\n    lst.delete(filteredListener);\r\n    if (!lst.size) {\r\n      FSEventsWatchers.delete(watchPath);\r\n      if (cont.watcher) return cont.watcher.stop().then(() => {\r\n        cont.rawEmitter = cont.watcher = undefined;\r\n        Object.freeze(cont);\r\n      });\r\n    }\r\n  };\r\n}\r\n\r\n// Decide whether or not we should start a new higher-level\r\n// parent watcher\r\nconst couldConsolidate = (path) => {\r\n  let count = 0;\r\n  for (const watchPath of FSEventsWatchers.keys()) {\r\n    if (watchPath.indexOf(path) === 0) {\r\n      count++;\r\n      if (count >= consolidateThreshhold) {\r\n        return true;\r\n      }\r\n    }\r\n  }\r\n\r\n  return false;\r\n};\r\n\r\n// returns boolean indicating whether fsevents can be used\r\nconst canUse = () => fsevents && FSEventsWatchers.size < 128;\r\n\r\n// determines subdirectory traversal levels from root to path\r\nconst calcDepth = (path, root) => {\r\n  let i = 0;\r\n  while (!path.indexOf(root) && (path = sysPath$1.dirname(path)) !== root) i++;\r\n  return i;\r\n};\r\n\r\n// returns boolean indicating whether the fsevents' event info has the same type\r\n// as the one returned by fs.stat\r\nconst sameTypes = (info, stats) => (\r\n  info.type === FSEVENT_TYPE_DIRECTORY && stats.isDirectory() ||\r\n  info.type === FSEVENT_TYPE_SYMLINK && stats.isSymbolicLink() ||\r\n  info.type === FSEVENT_TYPE_FILE && stats.isFile()\r\n);\r\n\r\n/**\r\n * @mixin\r\n */\r\nlet FsEventsHandler$1 = class FsEventsHandler {\r\n\r\n/**\r\n * @param {import('../index').FSWatcher} fsw\r\n */\r\nconstructor(fsw) {\r\n  this.fsw = fsw;\r\n}\r\ncheckIgnored(path, stats) {\r\n  const ipaths = this.fsw._ignoredPaths;\r\n  if (this.fsw._isIgnored(path, stats)) {\r\n    ipaths.add(path);\r\n    if (stats && stats.isDirectory()) {\r\n      ipaths.add(path + ROOT_GLOBSTAR);\r\n    }\r\n    return true;\r\n  }\r\n\r\n  ipaths.delete(path);\r\n  ipaths.delete(path + ROOT_GLOBSTAR);\r\n}\r\n\r\naddOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\r\n  const event = watchedDir.has(item) ? EV_CHANGE$1 : EV_ADD$1;\r\n  this.handleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n}\r\n\r\nasync checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts) {\r\n  try {\r\n    const stats = await stat$1(path);\r\n    if (this.fsw.closed) return;\r\n    if (sameTypes(info, stats)) {\r\n      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n    } else {\r\n      this.handleEvent(EV_UNLINK$1, path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n    }\r\n  } catch (error) {\r\n    if (error.code === 'EACCES') {\r\n      this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n    } else {\r\n      this.handleEvent(EV_UNLINK$1, path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n    }\r\n  }\r\n}\r\n\r\nhandleEvent(event, path, fullPath, realPath, parent, watchedDir, item, info, opts) {\r\n  if (this.fsw.closed || this.checkIgnored(path)) return;\r\n\r\n  if (event === EV_UNLINK$1) {\r\n    const isDirectory = info.type === FSEVENT_TYPE_DIRECTORY;\r\n    // suppress unlink events on never before seen files\r\n    if (isDirectory || watchedDir.has(item)) {\r\n      this.fsw._remove(parent, item, isDirectory);\r\n    }\r\n  } else {\r\n    if (event === EV_ADD$1) {\r\n      // track new directories\r\n      if (info.type === FSEVENT_TYPE_DIRECTORY) this.fsw._getWatchedDir(path);\r\n\r\n      if (info.type === FSEVENT_TYPE_SYMLINK && opts.followSymlinks) {\r\n        // push symlinks back to the top of the stack to get handled\r\n        const curDepth = opts.depth === undefined ?\r\n          undefined : calcDepth(fullPath, realPath) + 1;\r\n        return this._addToFsEvents(path, false, true, curDepth);\r\n      }\r\n\r\n      // track new paths\r\n      // (other than symlinks being followed, which will be tracked soon)\r\n      this.fsw._getWatchedDir(parent).add(item);\r\n    }\r\n    /**\r\n     * @type {'add'|'addDir'|'unlink'|'unlinkDir'}\r\n     */\r\n    const eventName = info.type === FSEVENT_TYPE_DIRECTORY ? event + DIR_SUFFIX : event;\r\n    this.fsw._emit(eventName, path);\r\n    if (eventName === EV_ADD_DIR$1) this._addToFsEvents(path, false, true);\r\n  }\r\n}\r\n\r\n/**\r\n * Handle symlinks encountered during directory scan\r\n * @param {String} watchPath  - file/dir path to be watched with fsevents\r\n * @param {String} realPath   - real path (in case of symlinks)\r\n * @param {Function} transform  - path transformer\r\n * @param {Function} globFilter - path filter in case a glob pattern was provided\r\n * @returns {Function} closer for the watcher instance\r\n*/\r\n_watchWithFsEvents(watchPath, realPath, transform, globFilter) {\r\n  if (this.fsw.closed || this.fsw._isIgnored(watchPath)) return;\r\n  const opts = this.fsw.options;\r\n  const watchCallback = async (fullPath, flags, info) => {\r\n    if (this.fsw.closed) return;\r\n    if (\r\n      opts.depth !== undefined &&\r\n      calcDepth(fullPath, realPath) > opts.depth\r\n    ) return;\r\n    const path = transform(sysPath$1.join(\r\n      watchPath, sysPath$1.relative(watchPath, fullPath)\r\n    ));\r\n    if (globFilter && !globFilter(path)) return;\r\n    // ensure directories are tracked\r\n    const parent = sysPath$1.dirname(path);\r\n    const item = sysPath$1.basename(path);\r\n    const watchedDir = this.fsw._getWatchedDir(\r\n      info.type === FSEVENT_TYPE_DIRECTORY ? path : parent\r\n    );\r\n\r\n    // correct for wrong events emitted\r\n    if (wrongEventFlags.has(flags) || info.event === FSEVENT_UNKNOWN) {\r\n      if (typeof opts.ignored === FUNCTION_TYPE$1) {\r\n        let stats;\r\n        try {\r\n          stats = await stat$1(path);\r\n        } catch (error) {}\r\n        if (this.fsw.closed) return;\r\n        if (this.checkIgnored(path, stats)) return;\r\n        if (sameTypes(info, stats)) {\r\n          this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n        } else {\r\n          this.handleEvent(EV_UNLINK$1, path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n        }\r\n      } else {\r\n        this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n      }\r\n    } else {\r\n      switch (info.event) {\r\n      case FSEVENT_CREATED:\r\n      case FSEVENT_MODIFIED:\r\n        return this.addOrChange(path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n      case FSEVENT_DELETED:\r\n      case FSEVENT_MOVED:\r\n        return this.checkExists(path, fullPath, realPath, parent, watchedDir, item, info, opts);\r\n      }\r\n    }\r\n  };\r\n\r\n  const closer = setFSEventsListener(\r\n    watchPath,\r\n    realPath,\r\n    watchCallback,\r\n    this.fsw._emitRaw\r\n  );\r\n\r\n  this.fsw._emitReady();\r\n  return closer;\r\n}\r\n\r\n/**\r\n * Handle symlinks encountered during directory scan\r\n * @param {String} linkPath path to symlink\r\n * @param {String} fullPath absolute path to the symlink\r\n * @param {Function} transform pre-existing path transformer\r\n * @param {Number} curDepth level of subdirectories traversed to where symlink is\r\n * @returns {Promise<void>}\r\n */\r\nasync _handleFsEventsSymlink(linkPath, fullPath, transform, curDepth) {\r\n  // don't follow the same symlink more than once\r\n  if (this.fsw.closed || this.fsw._symlinkPaths.has(fullPath)) return;\r\n\r\n  this.fsw._symlinkPaths.set(fullPath, true);\r\n  this.fsw._incrReadyCount();\r\n\r\n  try {\r\n    const linkTarget = await realpath(linkPath);\r\n    if (this.fsw.closed) return;\r\n    if (this.fsw._isIgnored(linkTarget)) {\r\n      return this.fsw._emitReady();\r\n    }\r\n\r\n    this.fsw._incrReadyCount();\r\n\r\n    // add the linkTarget for watching with a wrapper for transform\r\n    // that causes emitted paths to incorporate the link's path\r\n    this._addToFsEvents(linkTarget || linkPath, (path) => {\r\n      let aliasedPath = linkPath;\r\n      if (linkTarget && linkTarget !== DOT_SLASH) {\r\n        aliasedPath = path.replace(linkTarget, linkPath);\r\n      } else if (path !== DOT_SLASH) {\r\n        aliasedPath = sysPath$1.join(linkPath, path);\r\n      }\r\n      return transform(aliasedPath);\r\n    }, false, curDepth);\r\n  } catch(error) {\r\n    if (this.fsw._handleError(error)) {\r\n      return this.fsw._emitReady();\r\n    }\r\n  }\r\n}\r\n\r\n/**\r\n *\r\n * @param {Path} newPath\r\n * @param {fs.Stats} stats\r\n */\r\nemitAdd(newPath, stats, processPath, opts, forceAdd) {\r\n  const pp = processPath(newPath);\r\n  const isDir = stats.isDirectory();\r\n  const dirObj = this.fsw._getWatchedDir(sysPath$1.dirname(pp));\r\n  const base = sysPath$1.basename(pp);\r\n\r\n  // ensure empty dirs get tracked\r\n  if (isDir) this.fsw._getWatchedDir(pp);\r\n  if (dirObj.has(base)) return;\r\n  dirObj.add(base);\r\n\r\n  if (!opts.ignoreInitial || forceAdd === true) {\r\n    this.fsw._emit(isDir ? EV_ADD_DIR$1 : EV_ADD$1, pp, stats);\r\n  }\r\n}\r\n\r\ninitWatch(realPath, path, wh, processPath) {\r\n  if (this.fsw.closed) return;\r\n  const closer = this._watchWithFsEvents(\r\n    wh.watchPath,\r\n    sysPath$1.resolve(realPath || wh.watchPath),\r\n    processPath,\r\n    wh.globFilter\r\n  );\r\n  this.fsw._addPathCloser(path, closer);\r\n}\r\n\r\n/**\r\n * Handle added path with fsevents\r\n * @param {String} path file/dir path or glob pattern\r\n * @param {Function|Boolean=} transform converts working path to what the user expects\r\n * @param {Boolean=} forceAdd ensure add is emitted\r\n * @param {Number=} priorDepth Level of subdirectories already traversed.\r\n * @returns {Promise<void>}\r\n */\r\nasync _addToFsEvents(path, transform, forceAdd, priorDepth) {\r\n  if (this.fsw.closed) {\r\n    return;\r\n  }\r\n  const opts = this.fsw.options;\r\n  const processPath = typeof transform === FUNCTION_TYPE$1 ? transform : IDENTITY_FN;\r\n\r\n  const wh = this.fsw._getWatchHelpers(path);\r\n\r\n  // evaluate what is at the path we're being asked to watch\r\n  try {\r\n    const stats = await statMethods[wh.statMethod](wh.watchPath);\r\n    if (this.fsw.closed) return;\r\n    if (this.fsw._isIgnored(wh.watchPath, stats)) {\r\n      throw null;\r\n    }\r\n    if (stats.isDirectory()) {\r\n      // emit addDir unless this is a glob parent\r\n      if (!wh.globFilter) this.emitAdd(processPath(path), stats, processPath, opts, forceAdd);\r\n\r\n      // don't recurse further if it would exceed depth setting\r\n      if (priorDepth && priorDepth > opts.depth) return;\r\n\r\n      // scan the contents of the dir\r\n      this.fsw._readdirp(wh.watchPath, {\r\n        fileFilter: entry => wh.filterPath(entry),\r\n        directoryFilter: entry => wh.filterDir(entry),\r\n        ...Depth(opts.depth - (priorDepth || 0))\r\n      }).on(STR_DATA, (entry) => {\r\n        // need to check filterPath on dirs b/c filterDir is less restrictive\r\n        if (this.fsw.closed) {\r\n          return;\r\n        }\r\n        if (entry.stats.isDirectory() && !wh.filterPath(entry)) return;\r\n\r\n        const joinedPath = sysPath$1.join(wh.watchPath, entry.path);\r\n        const {fullPath} = entry;\r\n\r\n        if (wh.followSymlinks && entry.stats.isSymbolicLink()) {\r\n          // preserve the current depth here since it can't be derived from\r\n          // real paths past the symlink\r\n          const curDepth = opts.depth === undefined ?\r\n            undefined : calcDepth(joinedPath, sysPath$1.resolve(wh.watchPath)) + 1;\r\n\r\n          this._handleFsEventsSymlink(joinedPath, fullPath, processPath, curDepth);\r\n        } else {\r\n          this.emitAdd(joinedPath, entry.stats, processPath, opts, forceAdd);\r\n        }\r\n      }).on(EV_ERROR$1, EMPTY_FN$1).on(STR_END$1, () => {\r\n        this.fsw._emitReady();\r\n      });\r\n    } else {\r\n      this.emitAdd(wh.watchPath, stats, processPath, opts, forceAdd);\r\n      this.fsw._emitReady();\r\n    }\r\n  } catch (error) {\r\n    if (!error || this.fsw._handleError(error)) {\r\n      // TODO: Strange thing: \"should not choke on an ignored watch path\" will be failed without 2 ready calls -__-\r\n      this.fsw._emitReady();\r\n      this.fsw._emitReady();\r\n    }\r\n  }\r\n\r\n  if (opts.persistent && forceAdd !== true) {\r\n    if (typeof transform === FUNCTION_TYPE$1) {\r\n      // realpath has already been resolved\r\n      this.initWatch(undefined, path, wh, processPath);\r\n    } else {\r\n      let realPath;\r\n      try {\r\n        realPath = await realpath(wh.watchPath);\r\n      } catch (e) {}\r\n      this.initWatch(realPath, path, wh, processPath);\r\n    }\r\n  }\r\n}\r\n\r\n};\r\n\r\nfseventsHandler.exports = FsEventsHandler$1;\r\nfseventsHandler.exports.canUse = canUse;\r\n\r\nvar fseventsHandlerExports = fseventsHandler.exports;\r\n\r\nconst { EventEmitter } = require$$0$3;\r\nconst fs = require$$0$1;\r\nconst sysPath = require$$0$2;\r\nconst { promisify } = require$$2;\r\nconst readdirp = readdirp_1;\r\nconst anymatch = anymatchExports.default;\r\nconst globParent = globParent$1;\r\nconst isGlob = isGlob$2;\r\nconst braces = braces_1;\r\nconst normalizePath = normalizePath$2;\r\n\r\nconst NodeFsHandler = nodefsHandler;\r\nconst FsEventsHandler = fseventsHandlerExports;\r\nconst {\r\n  EV_ALL,\r\n  EV_READY,\r\n  EV_ADD,\r\n  EV_CHANGE,\r\n  EV_UNLINK,\r\n  EV_ADD_DIR,\r\n  EV_UNLINK_DIR,\r\n  EV_RAW,\r\n  EV_ERROR,\r\n\r\n  STR_CLOSE,\r\n  STR_END,\r\n\r\n  BACK_SLASH_RE,\r\n  DOUBLE_SLASH_RE,\r\n  SLASH_OR_BACK_SLASH_RE,\r\n  DOT_RE,\r\n  REPLACER_RE,\r\n\r\n  SLASH,\r\n  SLASH_SLASH,\r\n  BRACE_START,\r\n  BANG,\r\n  ONE_DOT,\r\n  TWO_DOTS,\r\n  GLOBSTAR,\r\n  SLASH_GLOBSTAR,\r\n  ANYMATCH_OPTS,\r\n  STRING_TYPE,\r\n  FUNCTION_TYPE,\r\n  EMPTY_STR,\r\n  EMPTY_FN,\r\n\r\n  isWindows,\r\n  isMacos,\r\n  isIBMi\r\n} = constants;\r\n\r\nconst stat = promisify(fs.stat);\r\nconst readdir = promisify(fs.readdir);\r\n\r\n/**\r\n * @typedef {String} Path\r\n * @typedef {'all'|'add'|'addDir'|'change'|'unlink'|'unlinkDir'|'raw'|'error'|'ready'} EventName\r\n * @typedef {'readdir'|'watch'|'add'|'remove'|'change'} ThrottleType\r\n */\r\n\r\n/**\r\n *\r\n * @typedef {Object} WatchHelpers\r\n * @property {Boolean} followSymlinks\r\n * @property {'stat'|'lstat'} statMethod\r\n * @property {Path} path\r\n * @property {Path} watchPath\r\n * @property {Function} entryPath\r\n * @property {Boolean} hasGlob\r\n * @property {Object} globFilter\r\n * @property {Function} filterPath\r\n * @property {Function} filterDir\r\n */\r\n\r\nconst arrify = (value = []) => Array.isArray(value) ? value : [value];\r\nconst flatten = (list, result = []) => {\r\n  list.forEach(item => {\r\n    if (Array.isArray(item)) {\r\n      flatten(item, result);\r\n    } else {\r\n      result.push(item);\r\n    }\r\n  });\r\n  return result;\r\n};\r\n\r\nconst unifyPaths = (paths_) => {\r\n  /**\r\n   * @type {Array<String>}\r\n   */\r\n  const paths = flatten(arrify(paths_));\r\n  if (!paths.every(p => typeof p === STRING_TYPE)) {\r\n    throw new TypeError(`Non-string provided as watch path: ${paths}`);\r\n  }\r\n  return paths.map(normalizePathToUnix);\r\n};\r\n\r\n// If SLASH_SLASH occurs at the beginning of path, it is not replaced\r\n//     because \"//StoragePC/DrivePool/Movies\" is a valid network path\r\nconst toUnix = (string) => {\r\n  let str = string.replace(BACK_SLASH_RE, SLASH);\r\n  let prepend = false;\r\n  if (str.startsWith(SLASH_SLASH)) {\r\n    prepend = true;\r\n  }\r\n  while (str.match(DOUBLE_SLASH_RE)) {\r\n    str = str.replace(DOUBLE_SLASH_RE, SLASH);\r\n  }\r\n  if (prepend) {\r\n    str = SLASH + str;\r\n  }\r\n  return str;\r\n};\r\n\r\n// Our version of upath.normalize\r\n// TODO: this is not equal to path-normalize module - investigate why\r\nconst normalizePathToUnix = (path) => toUnix(sysPath.normalize(toUnix(path)));\r\n\r\nconst normalizeIgnored = (cwd = EMPTY_STR) => (path) => {\r\n  if (typeof path !== STRING_TYPE) return path;\r\n  return normalizePathToUnix(sysPath.isAbsolute(path) ? path : sysPath.join(cwd, path));\r\n};\r\n\r\nconst getAbsolutePath = (path, cwd) => {\r\n  if (sysPath.isAbsolute(path)) {\r\n    return path;\r\n  }\r\n  if (path.startsWith(BANG)) {\r\n    return BANG + sysPath.join(cwd, path.slice(1));\r\n  }\r\n  return sysPath.join(cwd, path);\r\n};\r\n\r\nconst undef = (opts, key) => opts[key] === undefined;\r\n\r\n/**\r\n * Directory entry.\r\n * @property {Path} path\r\n * @property {Set<Path>} items\r\n */\r\nclass DirEntry {\r\n  /**\r\n   * @param {Path} dir\r\n   * @param {Function} removeWatcher\r\n   */\r\n  constructor(dir, removeWatcher) {\r\n    this.path = dir;\r\n    this._removeWatcher = removeWatcher;\r\n    /** @type {Set<Path>} */\r\n    this.items = new Set();\r\n  }\r\n\r\n  add(item) {\r\n    const {items} = this;\r\n    if (!items) return;\r\n    if (item !== ONE_DOT && item !== TWO_DOTS) items.add(item);\r\n  }\r\n\r\n  async remove(item) {\r\n    const {items} = this;\r\n    if (!items) return;\r\n    items.delete(item);\r\n    if (items.size > 0) return;\r\n\r\n    const dir = this.path;\r\n    try {\r\n      await readdir(dir);\r\n    } catch (err) {\r\n      if (this._removeWatcher) {\r\n        this._removeWatcher(sysPath.dirname(dir), sysPath.basename(dir));\r\n      }\r\n    }\r\n  }\r\n\r\n  has(item) {\r\n    const {items} = this;\r\n    if (!items) return;\r\n    return items.has(item);\r\n  }\r\n\r\n  /**\r\n   * @returns {Array<String>}\r\n   */\r\n  getChildren() {\r\n    const {items} = this;\r\n    if (!items) return;\r\n    return [...items.values()];\r\n  }\r\n\r\n  dispose() {\r\n    this.items.clear();\r\n    delete this.path;\r\n    delete this._removeWatcher;\r\n    delete this.items;\r\n    Object.freeze(this);\r\n  }\r\n}\r\n\r\nconst STAT_METHOD_F = 'stat';\r\nconst STAT_METHOD_L = 'lstat';\r\nclass WatchHelper {\r\n  constructor(path, watchPath, follow, fsw) {\r\n    this.fsw = fsw;\r\n    this.path = path = path.replace(REPLACER_RE, EMPTY_STR);\r\n    this.watchPath = watchPath;\r\n    this.fullWatchPath = sysPath.resolve(watchPath);\r\n    this.hasGlob = watchPath !== path;\r\n    /** @type {object|boolean} */\r\n    if (path === EMPTY_STR) this.hasGlob = false;\r\n    this.globSymlink = this.hasGlob && follow ? undefined : false;\r\n    this.globFilter = this.hasGlob ? anymatch(path, undefined, ANYMATCH_OPTS) : false;\r\n    this.dirParts = this.getDirParts(path);\r\n    this.dirParts.forEach((parts) => {\r\n      if (parts.length > 1) parts.pop();\r\n    });\r\n    this.followSymlinks = follow;\r\n    this.statMethod = follow ? STAT_METHOD_F : STAT_METHOD_L;\r\n  }\r\n\r\n  checkGlobSymlink(entry) {\r\n    // only need to resolve once\r\n    // first entry should always have entry.parentDir === EMPTY_STR\r\n    if (this.globSymlink === undefined) {\r\n      this.globSymlink = entry.fullParentDir === this.fullWatchPath ?\r\n        false : {realPath: entry.fullParentDir, linkPath: this.fullWatchPath};\r\n    }\r\n\r\n    if (this.globSymlink) {\r\n      return entry.fullPath.replace(this.globSymlink.realPath, this.globSymlink.linkPath);\r\n    }\r\n\r\n    return entry.fullPath;\r\n  }\r\n\r\n  entryPath(entry) {\r\n    return sysPath.join(this.watchPath,\r\n      sysPath.relative(this.watchPath, this.checkGlobSymlink(entry))\r\n    );\r\n  }\r\n\r\n  filterPath(entry) {\r\n    const {stats} = entry;\r\n    if (stats && stats.isSymbolicLink()) return this.filterDir(entry);\r\n    const resolvedPath = this.entryPath(entry);\r\n    const matchesGlob = this.hasGlob && typeof this.globFilter === FUNCTION_TYPE ?\r\n      this.globFilter(resolvedPath) : true;\r\n    return matchesGlob &&\r\n      this.fsw._isntIgnored(resolvedPath, stats) &&\r\n      this.fsw._hasReadPermissions(stats);\r\n  }\r\n\r\n  getDirParts(path) {\r\n    if (!this.hasGlob) return [];\r\n    const parts = [];\r\n    const expandedPath = path.includes(BRACE_START) ? braces.expand(path) : [path];\r\n    expandedPath.forEach((path) => {\r\n      parts.push(sysPath.relative(this.watchPath, path).split(SLASH_OR_BACK_SLASH_RE));\r\n    });\r\n    return parts;\r\n  }\r\n\r\n  filterDir(entry) {\r\n    if (this.hasGlob) {\r\n      const entryParts = this.getDirParts(this.checkGlobSymlink(entry));\r\n      let globstar = false;\r\n      this.unmatchedGlob = !this.dirParts.some((parts) => {\r\n        return parts.every((part, i) => {\r\n          if (part === GLOBSTAR) globstar = true;\r\n          return globstar || !entryParts[0][i] || anymatch(part, entryParts[0][i], ANYMATCH_OPTS);\r\n        });\r\n      });\r\n    }\r\n    return !this.unmatchedGlob && this.fsw._isntIgnored(this.entryPath(entry), entry.stats);\r\n  }\r\n}\r\n\r\n/**\r\n * Watches files & directories for changes. Emitted events:\r\n * `add`, `addDir`, `change`, `unlink`, `unlinkDir`, `all`, `error`\r\n *\r\n *     new FSWatcher()\r\n *       .add(directories)\r\n *       .on('add', path => log('File', path, 'was added'))\r\n */\r\nclass FSWatcher extends EventEmitter {\r\n// Not indenting methods for history sake; for now.\r\nconstructor(_opts) {\r\n  super();\r\n\r\n  const opts = {};\r\n  if (_opts) Object.assign(opts, _opts); // for frozen objects\r\n\r\n  /** @type {Map<String, DirEntry>} */\r\n  this._watched = new Map();\r\n  /** @type {Map<String, Array>} */\r\n  this._closers = new Map();\r\n  /** @type {Set<String>} */\r\n  this._ignoredPaths = new Set();\r\n\r\n  /** @type {Map<ThrottleType, Map>} */\r\n  this._throttled = new Map();\r\n\r\n  /** @type {Map<Path, String|Boolean>} */\r\n  this._symlinkPaths = new Map();\r\n\r\n  this._streams = new Set();\r\n  this.closed = false;\r\n\r\n  // Set up default options.\r\n  if (undef(opts, 'persistent')) opts.persistent = true;\r\n  if (undef(opts, 'ignoreInitial')) opts.ignoreInitial = false;\r\n  if (undef(opts, 'ignorePermissionErrors')) opts.ignorePermissionErrors = false;\r\n  if (undef(opts, 'interval')) opts.interval = 100;\r\n  if (undef(opts, 'binaryInterval')) opts.binaryInterval = 300;\r\n  if (undef(opts, 'disableGlobbing')) opts.disableGlobbing = false;\r\n  opts.enableBinaryInterval = opts.binaryInterval !== opts.interval;\r\n\r\n  // Enable fsevents on OS X when polling isn't explicitly enabled.\r\n  if (undef(opts, 'useFsEvents')) opts.useFsEvents = !opts.usePolling;\r\n\r\n  // If we can't use fsevents, ensure the options reflect it's disabled.\r\n  const canUseFsEvents = FsEventsHandler.canUse();\r\n  if (!canUseFsEvents) opts.useFsEvents = false;\r\n\r\n  // Use polling on Mac if not using fsevents.\r\n  // Other platforms use non-polling fs_watch.\r\n  if (undef(opts, 'usePolling') && !opts.useFsEvents) {\r\n    opts.usePolling = isMacos;\r\n  }\r\n\r\n  // Always default to polling on IBM i because fs.watch() is not available on IBM i.\r\n  if(isIBMi) {\r\n    opts.usePolling = true;\r\n  }\r\n\r\n  // Global override (useful for end-developers that need to force polling for all\r\n  // instances of chokidar, regardless of usage/dependency depth)\r\n  const envPoll = process.env.CHOKIDAR_USEPOLLING;\r\n  if (envPoll !== undefined) {\r\n    const envLower = envPoll.toLowerCase();\r\n\r\n    if (envLower === 'false' || envLower === '0') {\r\n      opts.usePolling = false;\r\n    } else if (envLower === 'true' || envLower === '1') {\r\n      opts.usePolling = true;\r\n    } else {\r\n      opts.usePolling = !!envLower;\r\n    }\r\n  }\r\n  const envInterval = process.env.CHOKIDAR_INTERVAL;\r\n  if (envInterval) {\r\n    opts.interval = Number.parseInt(envInterval, 10);\r\n  }\r\n\r\n  // Editor atomic write normalization enabled by default with fs.watch\r\n  if (undef(opts, 'atomic')) opts.atomic = !opts.usePolling && !opts.useFsEvents;\r\n  if (opts.atomic) this._pendingUnlinks = new Map();\r\n\r\n  if (undef(opts, 'followSymlinks')) opts.followSymlinks = true;\r\n\r\n  if (undef(opts, 'awaitWriteFinish')) opts.awaitWriteFinish = false;\r\n  if (opts.awaitWriteFinish === true) opts.awaitWriteFinish = {};\r\n  const awf = opts.awaitWriteFinish;\r\n  if (awf) {\r\n    if (!awf.stabilityThreshold) awf.stabilityThreshold = 2000;\r\n    if (!awf.pollInterval) awf.pollInterval = 100;\r\n    this._pendingWrites = new Map();\r\n  }\r\n  if (opts.ignored) opts.ignored = arrify(opts.ignored);\r\n\r\n  let readyCalls = 0;\r\n  this._emitReady = () => {\r\n    readyCalls++;\r\n    if (readyCalls >= this._readyCount) {\r\n      this._emitReady = EMPTY_FN;\r\n      this._readyEmitted = true;\r\n      // use process.nextTick to allow time for listener to be bound\r\n      process.nextTick(() => this.emit(EV_READY));\r\n    }\r\n  };\r\n  this._emitRaw = (...args) => this.emit(EV_RAW, ...args);\r\n  this._readyEmitted = false;\r\n  this.options = opts;\r\n\r\n  // Initialize with proper watcher.\r\n  if (opts.useFsEvents) {\r\n    this._fsEventsHandler = new FsEventsHandler(this);\r\n  } else {\r\n    this._nodeFsHandler = new NodeFsHandler(this);\r\n  }\r\n\r\n  // You’re frozen when your heart’s not open.\r\n  Object.freeze(opts);\r\n}\r\n\r\n// Public methods\r\n\r\n/**\r\n * Adds paths to be watched on an existing FSWatcher instance\r\n * @param {Path|Array<Path>} paths_\r\n * @param {String=} _origAdd private; for handling non-existent paths to be watched\r\n * @param {Boolean=} _internal private; indicates a non-user add\r\n * @returns {FSWatcher} for chaining\r\n */\r\nadd(paths_, _origAdd, _internal) {\r\n  const {cwd, disableGlobbing} = this.options;\r\n  this.closed = false;\r\n  let paths = unifyPaths(paths_);\r\n  if (cwd) {\r\n    paths = paths.map((path) => {\r\n      const absPath = getAbsolutePath(path, cwd);\r\n\r\n      // Check `path` instead of `absPath` because the cwd portion can't be a glob\r\n      if (disableGlobbing || !isGlob(path)) {\r\n        return absPath;\r\n      }\r\n      return normalizePath(absPath);\r\n    });\r\n  }\r\n\r\n  // set aside negated glob strings\r\n  paths = paths.filter((path) => {\r\n    if (path.startsWith(BANG)) {\r\n      this._ignoredPaths.add(path.slice(1));\r\n      return false;\r\n    }\r\n\r\n    // if a path is being added that was previously ignored, stop ignoring it\r\n    this._ignoredPaths.delete(path);\r\n    this._ignoredPaths.delete(path + SLASH_GLOBSTAR);\r\n\r\n    // reset the cached userIgnored anymatch fn\r\n    // to make ignoredPaths changes effective\r\n    this._userIgnored = undefined;\r\n\r\n    return true;\r\n  });\r\n\r\n  if (this.options.useFsEvents && this._fsEventsHandler) {\r\n    if (!this._readyCount) this._readyCount = paths.length;\r\n    if (this.options.persistent) this._readyCount += paths.length;\r\n    paths.forEach((path) => this._fsEventsHandler._addToFsEvents(path));\r\n  } else {\r\n    if (!this._readyCount) this._readyCount = 0;\r\n    this._readyCount += paths.length;\r\n    Promise.all(\r\n      paths.map(async path => {\r\n        const res = await this._nodeFsHandler._addToNodeFs(path, !_internal, 0, 0, _origAdd);\r\n        if (res) this._emitReady();\r\n        return res;\r\n      })\r\n    ).then(results => {\r\n      if (this.closed) return;\r\n      results.filter(item => item).forEach(item => {\r\n        this.add(sysPath.dirname(item), sysPath.basename(_origAdd || item));\r\n      });\r\n    });\r\n  }\r\n\r\n  return this;\r\n}\r\n\r\n/**\r\n * Close watchers or start ignoring events from specified paths.\r\n * @param {Path|Array<Path>} paths_ - string or array of strings, file/directory paths and/or globs\r\n * @returns {FSWatcher} for chaining\r\n*/\r\nunwatch(paths_) {\r\n  if (this.closed) return this;\r\n  const paths = unifyPaths(paths_);\r\n  const {cwd} = this.options;\r\n\r\n  paths.forEach((path) => {\r\n    // convert to absolute path unless relative path already matches\r\n    if (!sysPath.isAbsolute(path) && !this._closers.has(path)) {\r\n      if (cwd) path = sysPath.join(cwd, path);\r\n      path = sysPath.resolve(path);\r\n    }\r\n\r\n    this._closePath(path);\r\n\r\n    this._ignoredPaths.add(path);\r\n    if (this._watched.has(path)) {\r\n      this._ignoredPaths.add(path + SLASH_GLOBSTAR);\r\n    }\r\n\r\n    // reset the cached userIgnored anymatch fn\r\n    // to make ignoredPaths changes effective\r\n    this._userIgnored = undefined;\r\n  });\r\n\r\n  return this;\r\n}\r\n\r\n/**\r\n * Close watchers and remove all listeners from watched paths.\r\n * @returns {Promise<void>}.\r\n*/\r\nclose() {\r\n  if (this.closed) return this._closePromise;\r\n  this.closed = true;\r\n\r\n  // Memory management.\r\n  this.removeAllListeners();\r\n  const closers = [];\r\n  this._closers.forEach(closerList => closerList.forEach(closer => {\r\n    const promise = closer();\r\n    if (promise instanceof Promise) closers.push(promise);\r\n  }));\r\n  this._streams.forEach(stream => stream.destroy());\r\n  this._userIgnored = undefined;\r\n  this._readyCount = 0;\r\n  this._readyEmitted = false;\r\n  this._watched.forEach(dirent => dirent.dispose());\r\n  ['closers', 'watched', 'streams', 'symlinkPaths', 'throttled'].forEach(key => {\r\n    this[`_${key}`].clear();\r\n  });\r\n\r\n  this._closePromise = closers.length ? Promise.all(closers).then(() => undefined) : Promise.resolve();\r\n  return this._closePromise;\r\n}\r\n\r\n/**\r\n * Expose list of watched paths\r\n * @returns {Object} for chaining\r\n*/\r\ngetWatched() {\r\n  const watchList = {};\r\n  this._watched.forEach((entry, dir) => {\r\n    const key = this.options.cwd ? sysPath.relative(this.options.cwd, dir) : dir;\r\n    watchList[key || ONE_DOT] = entry.getChildren().sort();\r\n  });\r\n  return watchList;\r\n}\r\n\r\nemitWithAll(event, args) {\r\n  this.emit(...args);\r\n  if (event !== EV_ERROR) this.emit(EV_ALL, ...args);\r\n}\r\n\r\n// Common helpers\r\n// --------------\r\n\r\n/**\r\n * Normalize and emit events.\r\n * Calling _emit DOES NOT MEAN emit() would be called!\r\n * @param {EventName} event Type of event\r\n * @param {Path} path File or directory path\r\n * @param {*=} val1 arguments to be passed with event\r\n * @param {*=} val2\r\n * @param {*=} val3\r\n * @returns the error if defined, otherwise the value of the FSWatcher instance's `closed` flag\r\n */\r\nasync _emit(event, path, val1, val2, val3) {\r\n  if (this.closed) return;\r\n\r\n  const opts = this.options;\r\n  if (isWindows) path = sysPath.normalize(path);\r\n  if (opts.cwd) path = sysPath.relative(opts.cwd, path);\r\n  /** @type Array<any> */\r\n  const args = [event, path];\r\n  if (val3 !== undefined) args.push(val1, val2, val3);\r\n  else if (val2 !== undefined) args.push(val1, val2);\r\n  else if (val1 !== undefined) args.push(val1);\r\n\r\n  const awf = opts.awaitWriteFinish;\r\n  let pw;\r\n  if (awf && (pw = this._pendingWrites.get(path))) {\r\n    pw.lastChange = new Date();\r\n    return this;\r\n  }\r\n\r\n  if (opts.atomic) {\r\n    if (event === EV_UNLINK) {\r\n      this._pendingUnlinks.set(path, args);\r\n      setTimeout(() => {\r\n        this._pendingUnlinks.forEach((entry, path) => {\r\n          this.emit(...entry);\r\n          this.emit(EV_ALL, ...entry);\r\n          this._pendingUnlinks.delete(path);\r\n        });\r\n      }, typeof opts.atomic === 'number' ? opts.atomic : 100);\r\n      return this;\r\n    }\r\n    if (event === EV_ADD && this._pendingUnlinks.has(path)) {\r\n      event = args[0] = EV_CHANGE;\r\n      this._pendingUnlinks.delete(path);\r\n    }\r\n  }\r\n\r\n  if (awf && (event === EV_ADD || event === EV_CHANGE) && this._readyEmitted) {\r\n    const awfEmit = (err, stats) => {\r\n      if (err) {\r\n        event = args[0] = EV_ERROR;\r\n        args[1] = err;\r\n        this.emitWithAll(event, args);\r\n      } else if (stats) {\r\n        // if stats doesn't exist the file must have been deleted\r\n        if (args.length > 2) {\r\n          args[2] = stats;\r\n        } else {\r\n          args.push(stats);\r\n        }\r\n        this.emitWithAll(event, args);\r\n      }\r\n    };\r\n\r\n    this._awaitWriteFinish(path, awf.stabilityThreshold, event, awfEmit);\r\n    return this;\r\n  }\r\n\r\n  if (event === EV_CHANGE) {\r\n    const isThrottled = !this._throttle(EV_CHANGE, path, 50);\r\n    if (isThrottled) return this;\r\n  }\r\n\r\n  if (opts.alwaysStat && val1 === undefined &&\r\n    (event === EV_ADD || event === EV_ADD_DIR || event === EV_CHANGE)\r\n  ) {\r\n    const fullPath = opts.cwd ? sysPath.join(opts.cwd, path) : path;\r\n    let stats;\r\n    try {\r\n      stats = await stat(fullPath);\r\n    } catch (err) {}\r\n    // Suppress event when fs_stat fails, to avoid sending undefined 'stat'\r\n    if (!stats || this.closed) return;\r\n    args.push(stats);\r\n  }\r\n  this.emitWithAll(event, args);\r\n\r\n  return this;\r\n}\r\n\r\n/**\r\n * Common handler for errors\r\n * @param {Error} error\r\n * @returns {Error|Boolean} The error if defined, otherwise the value of the FSWatcher instance's `closed` flag\r\n */\r\n_handleError(error) {\r\n  const code = error && error.code;\r\n  if (error && code !== 'ENOENT' && code !== 'ENOTDIR' &&\r\n    (!this.options.ignorePermissionErrors || (code !== 'EPERM' && code !== 'EACCES'))\r\n  ) {\r\n    this.emit(EV_ERROR, error);\r\n  }\r\n  return error || this.closed;\r\n}\r\n\r\n/**\r\n * Helper utility for throttling\r\n * @param {ThrottleType} actionType type being throttled\r\n * @param {Path} path being acted upon\r\n * @param {Number} timeout duration of time to suppress duplicate actions\r\n * @returns {Object|false} tracking object or false if action should be suppressed\r\n */\r\n_throttle(actionType, path, timeout) {\r\n  if (!this._throttled.has(actionType)) {\r\n    this._throttled.set(actionType, new Map());\r\n  }\r\n\r\n  /** @type {Map<Path, Object>} */\r\n  const action = this._throttled.get(actionType);\r\n  /** @type {Object} */\r\n  const actionPath = action.get(path);\r\n\r\n  if (actionPath) {\r\n    actionPath.count++;\r\n    return false;\r\n  }\r\n\r\n  let timeoutObject;\r\n  const clear = () => {\r\n    const item = action.get(path);\r\n    const count = item ? item.count : 0;\r\n    action.delete(path);\r\n    clearTimeout(timeoutObject);\r\n    if (item) clearTimeout(item.timeoutObject);\r\n    return count;\r\n  };\r\n  timeoutObject = setTimeout(clear, timeout);\r\n  const thr = {timeoutObject, clear, count: 0};\r\n  action.set(path, thr);\r\n  return thr;\r\n}\r\n\r\n_incrReadyCount() {\r\n  return this._readyCount++;\r\n}\r\n\r\n/**\r\n * Awaits write operation to finish.\r\n * Polls a newly created file for size variations. When files size does not change for 'threshold' milliseconds calls callback.\r\n * @param {Path} path being acted upon\r\n * @param {Number} threshold Time in milliseconds a file size must be fixed before acknowledging write OP is finished\r\n * @param {EventName} event\r\n * @param {Function} awfEmit Callback to be called when ready for event to be emitted.\r\n */\r\n_awaitWriteFinish(path, threshold, event, awfEmit) {\r\n  let timeoutHandler;\r\n\r\n  let fullPath = path;\r\n  if (this.options.cwd && !sysPath.isAbsolute(path)) {\r\n    fullPath = sysPath.join(this.options.cwd, path);\r\n  }\r\n\r\n  const now = new Date();\r\n\r\n  const awaitWriteFinish = (prevStat) => {\r\n    fs.stat(fullPath, (err, curStat) => {\r\n      if (err || !this._pendingWrites.has(path)) {\r\n        if (err && err.code !== 'ENOENT') awfEmit(err);\r\n        return;\r\n      }\r\n\r\n      const now = Number(new Date());\r\n\r\n      if (prevStat && curStat.size !== prevStat.size) {\r\n        this._pendingWrites.get(path).lastChange = now;\r\n      }\r\n      const pw = this._pendingWrites.get(path);\r\n      const df = now - pw.lastChange;\r\n\r\n      if (df >= threshold) {\r\n        this._pendingWrites.delete(path);\r\n        awfEmit(undefined, curStat);\r\n      } else {\r\n        timeoutHandler = setTimeout(\r\n          awaitWriteFinish,\r\n          this.options.awaitWriteFinish.pollInterval,\r\n          curStat\r\n        );\r\n      }\r\n    });\r\n  };\r\n\r\n  if (!this._pendingWrites.has(path)) {\r\n    this._pendingWrites.set(path, {\r\n      lastChange: now,\r\n      cancelWait: () => {\r\n        this._pendingWrites.delete(path);\r\n        clearTimeout(timeoutHandler);\r\n        return event;\r\n      }\r\n    });\r\n    timeoutHandler = setTimeout(\r\n      awaitWriteFinish,\r\n      this.options.awaitWriteFinish.pollInterval\r\n    );\r\n  }\r\n}\r\n\r\n_getGlobIgnored() {\r\n  return [...this._ignoredPaths.values()];\r\n}\r\n\r\n/**\r\n * Determines whether user has asked to ignore this path.\r\n * @param {Path} path filepath or dir\r\n * @param {fs.Stats=} stats result of fs.stat\r\n * @returns {Boolean}\r\n */\r\n_isIgnored(path, stats) {\r\n  if (this.options.atomic && DOT_RE.test(path)) return true;\r\n  if (!this._userIgnored) {\r\n    const {cwd} = this.options;\r\n    const ign = this.options.ignored;\r\n\r\n    const ignored = ign && ign.map(normalizeIgnored(cwd));\r\n    const paths = arrify(ignored)\r\n      .filter((path) => typeof path === STRING_TYPE && !isGlob(path))\r\n      .map((path) => path + SLASH_GLOBSTAR);\r\n    const list = this._getGlobIgnored().map(normalizeIgnored(cwd)).concat(ignored, paths);\r\n    this._userIgnored = anymatch(list, undefined, ANYMATCH_OPTS);\r\n  }\r\n\r\n  return this._userIgnored([path, stats]);\r\n}\r\n\r\n_isntIgnored(path, stat) {\r\n  return !this._isIgnored(path, stat);\r\n}\r\n\r\n/**\r\n * Provides a set of common helpers and properties relating to symlink and glob handling.\r\n * @param {Path} path file, directory, or glob pattern being watched\r\n * @param {Number=} depth at any depth > 0, this isn't a glob\r\n * @returns {WatchHelper} object containing helpers for this path\r\n */\r\n_getWatchHelpers(path, depth) {\r\n  const watchPath = depth || this.options.disableGlobbing || !isGlob(path) ? path : globParent(path);\r\n  const follow = this.options.followSymlinks;\r\n\r\n  return new WatchHelper(path, watchPath, follow, this);\r\n}\r\n\r\n// Directory helpers\r\n// -----------------\r\n\r\n/**\r\n * Provides directory tracking objects\r\n * @param {String} directory path of the directory\r\n * @returns {DirEntry} the directory's tracking object\r\n */\r\n_getWatchedDir(directory) {\r\n  if (!this._boundRemove) this._boundRemove = this._remove.bind(this);\r\n  const dir = sysPath.resolve(directory);\r\n  if (!this._watched.has(dir)) this._watched.set(dir, new DirEntry(dir, this._boundRemove));\r\n  return this._watched.get(dir);\r\n}\r\n\r\n// File helpers\r\n// ------------\r\n\r\n/**\r\n * Check for read permissions.\r\n * Based on this answer on SO: https://stackoverflow.com/a/11781404/1358405\r\n * @param {fs.Stats} stats - object, result of fs_stat\r\n * @returns {Boolean} indicates whether the file can be read\r\n*/\r\n_hasReadPermissions(stats) {\r\n  if (this.options.ignorePermissionErrors) return true;\r\n\r\n  // stats.mode may be bigint\r\n  const md = stats && Number.parseInt(stats.mode, 10);\r\n  const st = md & 0o777;\r\n  const it = Number.parseInt(st.toString(8)[0], 10);\r\n  return Boolean(4 & it);\r\n}\r\n\r\n/**\r\n * Handles emitting unlink events for\r\n * files and directories, and via recursion, for\r\n * files and directories within directories that are unlinked\r\n * @param {String} directory within which the following item is located\r\n * @param {String} item      base path of item/directory\r\n * @returns {void}\r\n*/\r\n_remove(directory, item, isDirectory) {\r\n  // if what is being deleted is a directory, get that directory's paths\r\n  // for recursive deleting and cleaning of watched object\r\n  // if it is not a directory, nestedDirectoryChildren will be empty array\r\n  const path = sysPath.join(directory, item);\r\n  const fullPath = sysPath.resolve(path);\r\n  isDirectory = isDirectory != null\r\n    ? isDirectory\r\n    : this._watched.has(path) || this._watched.has(fullPath);\r\n\r\n  // prevent duplicate handling in case of arriving here nearly simultaneously\r\n  // via multiple paths (such as _handleFile and _handleDir)\r\n  if (!this._throttle('remove', path, 100)) return;\r\n\r\n  // if the only watched file is removed, watch for its return\r\n  if (!isDirectory && !this.options.useFsEvents && this._watched.size === 1) {\r\n    this.add(directory, item, true);\r\n  }\r\n\r\n  // This will create a new entry in the watched object in either case\r\n  // so we got to do the directory check beforehand\r\n  const wp = this._getWatchedDir(path);\r\n  const nestedDirectoryChildren = wp.getChildren();\r\n\r\n  // Recursively remove children directories / files.\r\n  nestedDirectoryChildren.forEach(nested => this._remove(path, nested));\r\n\r\n  // Check if item was on the watched list and remove it\r\n  const parent = this._getWatchedDir(directory);\r\n  const wasTracked = parent.has(item);\r\n  parent.remove(item);\r\n\r\n  // Fixes issue #1042 -> Relative paths were detected and added as symlinks\r\n  // (https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L612),\r\n  // but never removed from the map in case the path was deleted.\r\n  // This leads to an incorrect state if the path was recreated:\r\n  // https://github.com/paulmillr/chokidar/blob/e1753ddbc9571bdc33b4a4af172d52cb6e611c10/lib/nodefs-handler.js#L553\r\n  if (this._symlinkPaths.has(fullPath)) {\r\n    this._symlinkPaths.delete(fullPath);\r\n  }\r\n\r\n  // If we wait for this file to be fully written, cancel the wait.\r\n  let relPath = path;\r\n  if (this.options.cwd) relPath = sysPath.relative(this.options.cwd, path);\r\n  if (this.options.awaitWriteFinish && this._pendingWrites.has(relPath)) {\r\n    const event = this._pendingWrites.get(relPath).cancelWait();\r\n    if (event === EV_ADD) return;\r\n  }\r\n\r\n  // The Entry will either be a directory that just got removed\r\n  // or a bogus entry to a file, in either case we have to remove it\r\n  this._watched.delete(path);\r\n  this._watched.delete(fullPath);\r\n  const eventName = isDirectory ? EV_UNLINK_DIR : EV_UNLINK;\r\n  if (wasTracked && !this._isIgnored(path)) this._emit(eventName, path);\r\n\r\n  // Avoid conflicts if we later create another file with the same name\r\n  if (!this.options.useFsEvents) {\r\n    this._closePath(path);\r\n  }\r\n}\r\n\r\n/**\r\n * Closes all watchers for a path\r\n * @param {Path} path\r\n */\r\n_closePath(path) {\r\n  this._closeFile(path);\r\n  const dir = sysPath.dirname(path);\r\n  this._getWatchedDir(dir).remove(sysPath.basename(path));\r\n}\r\n\r\n/**\r\n * Closes only file-specific watchers\r\n * @param {Path} path\r\n */\r\n_closeFile(path) {\r\n  const closers = this._closers.get(path);\r\n  if (!closers) return;\r\n  closers.forEach(closer => closer());\r\n  this._closers.delete(path);\r\n}\r\n\r\n/**\r\n *\r\n * @param {Path} path\r\n * @param {Function} closer\r\n */\r\n_addPathCloser(path, closer) {\r\n  if (!closer) return;\r\n  let list = this._closers.get(path);\r\n  if (!list) {\r\n    list = [];\r\n    this._closers.set(path, list);\r\n  }\r\n  list.push(closer);\r\n}\r\n\r\n_readdirp(root, opts) {\r\n  if (this.closed) return;\r\n  const options = {type: EV_ALL, alwaysStat: true, lstat: true, ...opts};\r\n  let stream = readdirp(root, options);\r\n  this._streams.add(stream);\r\n  stream.once(STR_CLOSE, () => {\r\n    stream = undefined;\r\n  });\r\n  stream.once(STR_END, () => {\r\n    if (stream) {\r\n      this._streams.delete(stream);\r\n      stream = undefined;\r\n    }\r\n  });\r\n  return stream;\r\n}\r\n\r\n}\r\n\r\n// Export FSWatcher class\r\nchokidar.FSWatcher = FSWatcher;\r\n\r\n/**\r\n * Instantiates watcher with paths to be tracked.\r\n * @param {String|Array<String>} paths file/directory paths and/or globs\r\n * @param {Object=} options chokidar opts\r\n * @returns an instance of FSWatcher for chaining.\r\n */\r\nconst watch = (paths, options) => {\r\n  const watcher = new FSWatcher(options);\r\n  watcher.add(paths);\r\n  return watcher;\r\n};\r\n\r\nchokidar.watch = watch;\r\n\r\nclass FileWatcher {\r\n    constructor(task, chokidarOptions) {\r\n        this.transformWatchers = new Map();\r\n        this.chokidarOptions = chokidarOptions;\r\n        this.task = task;\r\n        this.watcher = this.createWatcher(null);\r\n    }\r\n    close() {\r\n        this.watcher.close();\r\n        for (const watcher of this.transformWatchers.values()) {\r\n            watcher.close();\r\n        }\r\n    }\r\n    unwatch(id) {\r\n        this.watcher.unwatch(id);\r\n        const transformWatcher = this.transformWatchers.get(id);\r\n        if (transformWatcher) {\r\n            this.transformWatchers.delete(id);\r\n            transformWatcher.close();\r\n        }\r\n    }\r\n    watch(id, isTransformDependency) {\r\n        if (isTransformDependency) {\r\n            const watcher = this.transformWatchers.get(id) ?? this.createWatcher(id);\r\n            watcher.add(id);\r\n            this.transformWatchers.set(id, watcher);\r\n        }\r\n        else {\r\n            this.watcher.add(id);\r\n        }\r\n    }\r\n    createWatcher(transformWatcherId) {\r\n        const task = this.task;\r\n        const isLinux = platform() === 'linux';\r\n        const isTransformDependency = transformWatcherId !== null;\r\n        const handleChange = (id, event) => {\r\n            const changedId = transformWatcherId || id;\r\n            if (isLinux) {\r\n                // unwatching and watching fixes an issue with chokidar where on certain systems,\r\n                // a file that was unlinked and immediately recreated would create a change event\r\n                // but then no longer any further events\r\n                watcher.unwatch(changedId);\r\n                watcher.add(changedId);\r\n            }\r\n            task.invalidate(changedId, { event, isTransformDependency });\r\n        };\r\n        const watcher = chokidar\r\n            .watch([], this.chokidarOptions)\r\n            .on('add', id => handleChange(id, 'create'))\r\n            .on('change', id => handleChange(id, 'update'))\r\n            .on('unlink', id => handleChange(id, 'delete'));\r\n        return watcher;\r\n    }\r\n}\r\n\r\nconst eventsRewrites = {\r\n    create: {\r\n        create: 'buggy',\r\n        delete: null, //delete file from map\r\n        update: 'create'\r\n    },\r\n    delete: {\r\n        create: 'update',\r\n        delete: 'buggy',\r\n        update: 'buggy'\r\n    },\r\n    update: {\r\n        create: 'buggy',\r\n        delete: 'delete',\r\n        update: 'update'\r\n    }\r\n};\r\nclass Watcher {\r\n    constructor(optionsList, emitter) {\r\n        this.buildDelay = 0;\r\n        this.buildTimeout = null;\r\n        this.closed = false;\r\n        this.invalidatedIds = new Map();\r\n        this.rerun = false;\r\n        this.running = true;\r\n        this.emitter = emitter;\r\n        emitter.close = this.close.bind(this);\r\n        this.tasks = optionsList.map(options => new Task(this, options));\r\n        for (const { watch } of optionsList) {\r\n            if (watch && typeof watch.buildDelay === 'number') {\r\n                this.buildDelay = Math.max(this.buildDelay, watch.buildDelay);\r\n            }\r\n        }\r\n        process$1.nextTick(() => this.run());\r\n    }\r\n    async close() {\r\n        if (this.closed)\r\n            return;\r\n        this.closed = true;\r\n        if (this.buildTimeout)\r\n            clearTimeout(this.buildTimeout);\r\n        for (const task of this.tasks) {\r\n            task.close();\r\n        }\r\n        await this.emitter.emit('close');\r\n        this.emitter.removeAllListeners();\r\n    }\r\n    invalidate(file) {\r\n        if (file) {\r\n            const previousEvent = this.invalidatedIds.get(file.id);\r\n            const event = previousEvent ? eventsRewrites[previousEvent][file.event] : file.event;\r\n            if (event === 'buggy') {\r\n                //TODO: throws or warn? Currently just ignore, uses new event\r\n                this.invalidatedIds.set(file.id, file.event);\r\n            }\r\n            else if (event === null) {\r\n                this.invalidatedIds.delete(file.id);\r\n            }\r\n            else {\r\n                this.invalidatedIds.set(file.id, event);\r\n            }\r\n        }\r\n        if (this.running) {\r\n            this.rerun = true;\r\n            return;\r\n        }\r\n        if (this.buildTimeout)\r\n            clearTimeout(this.buildTimeout);\r\n        this.buildTimeout = setTimeout(async () => {\r\n            this.buildTimeout = null;\r\n            try {\r\n                await Promise.all([...this.invalidatedIds].map(([id, event]) => this.emitter.emit('change', id, { event })));\r\n                this.invalidatedIds.clear();\r\n                await this.emitter.emit('restart');\r\n                this.emitter.removeListenersForCurrentRun();\r\n                this.run();\r\n            }\r\n            catch (error) {\r\n                this.invalidatedIds.clear();\r\n                await this.emitter.emit('event', {\r\n                    code: 'ERROR',\r\n                    error,\r\n                    result: null\r\n                });\r\n                await this.emitter.emit('event', {\r\n                    code: 'END'\r\n                });\r\n            }\r\n        }, this.buildDelay);\r\n    }\r\n    async run() {\r\n        this.running = true;\r\n        await this.emitter.emit('event', {\r\n            code: 'START'\r\n        });\r\n        for (const task of this.tasks) {\r\n            await task.run();\r\n        }\r\n        this.running = false;\r\n        await this.emitter.emit('event', {\r\n            code: 'END'\r\n        });\r\n        if (this.rerun) {\r\n            this.rerun = false;\r\n            this.invalidate();\r\n        }\r\n    }\r\n}\r\nclass Task {\r\n    constructor(watcher, options) {\r\n        this.cache = { modules: [] };\r\n        this.watchFiles = [];\r\n        this.closed = false;\r\n        this.invalidated = true;\r\n        this.watched = new Set();\r\n        this.watcher = watcher;\r\n        this.options = options;\r\n        this.skipWrite = Boolean(options.watch && options.watch.skipWrite);\r\n        this.outputs = this.options.output;\r\n        this.outputFiles = this.outputs.map(output => {\r\n            if (output.file || output.dir)\r\n                return resolve(output.file || output.dir);\r\n            return undefined;\r\n        });\r\n        const watchOptions = this.options.watch || {};\r\n        this.filter = createFilter(watchOptions.include, watchOptions.exclude);\r\n        this.fileWatcher = new FileWatcher(this, {\r\n            ...watchOptions.chokidar,\r\n            disableGlobbing: true,\r\n            ignoreInitial: true\r\n        });\r\n    }\r\n    close() {\r\n        this.closed = true;\r\n        this.fileWatcher.close();\r\n    }\r\n    invalidate(id, details) {\r\n        this.invalidated = true;\r\n        if (details.isTransformDependency) {\r\n            for (const module of this.cache.modules) {\r\n                if (!module.transformDependencies.includes(id))\r\n                    continue;\r\n                // effective invalidation\r\n                module.originalCode = null;\r\n            }\r\n        }\r\n        this.watcher.invalidate({ event: details.event, id });\r\n    }\r\n    async run() {\r\n        if (!this.invalidated)\r\n            return;\r\n        this.invalidated = false;\r\n        const options = {\r\n            ...this.options,\r\n            cache: this.cache\r\n        };\r\n        const start = Date.now();\r\n        await this.watcher.emitter.emit('event', {\r\n            code: 'BUNDLE_START',\r\n            input: this.options.input,\r\n            output: this.outputFiles\r\n        });\r\n        let result = null;\r\n        try {\r\n            result = await rollupInternal(options, this.watcher.emitter);\r\n            if (this.closed) {\r\n                return;\r\n            }\r\n            this.updateWatchedFiles(result);\r\n            if (!this.skipWrite) {\r\n                await Promise.all(this.outputs.map(output => result.write(output)));\r\n                if (this.closed) {\r\n                    return;\r\n                }\r\n                this.updateWatchedFiles(result);\r\n            }\r\n            await this.watcher.emitter.emit('event', {\r\n                code: 'BUNDLE_END',\r\n                duration: Date.now() - start,\r\n                input: this.options.input,\r\n                output: this.outputFiles,\r\n                result\r\n            });\r\n        }\r\n        catch (error) {\r\n            if (!this.closed) {\r\n                if (Array.isArray(error.watchFiles)) {\r\n                    for (const id of error.watchFiles) {\r\n                        this.watchFile(id);\r\n                    }\r\n                }\r\n                if (error.id) {\r\n                    this.cache.modules = this.cache.modules.filter(module => module.id !== error.id);\r\n                }\r\n            }\r\n            await this.watcher.emitter.emit('event', {\r\n                code: 'ERROR',\r\n                error,\r\n                result\r\n            });\r\n        }\r\n    }\r\n    updateWatchedFiles(result) {\r\n        const previouslyWatched = this.watched;\r\n        this.watched = new Set();\r\n        this.watchFiles = result.watchFiles;\r\n        this.cache = result.cache;\r\n        for (const id of this.watchFiles) {\r\n            this.watchFile(id);\r\n        }\r\n        for (const module of this.cache.modules) {\r\n            for (const depId of module.transformDependencies) {\r\n                this.watchFile(depId, true);\r\n            }\r\n        }\r\n        for (const id of previouslyWatched) {\r\n            if (!this.watched.has(id)) {\r\n                this.fileWatcher.unwatch(id);\r\n            }\r\n        }\r\n    }\r\n    watchFile(id, isTransformDependency = false) {\r\n        if (!this.filter(id))\r\n            return;\r\n        this.watched.add(id);\r\n        if (this.outputFiles.includes(id)) {\r\n            throw new Error('Cannot import the generated bundle');\r\n        }\r\n        // this is necessary to ensure that any 'renamed' files\r\n        // continue to be watched following an error\r\n        this.fileWatcher.watch(id, isTransformDependency);\r\n    }\r\n}\r\n\r\nexport { Task, Watcher };\r\n"],
  "mappings": "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",
  "names": ["require$$0$1", "require$$1", "require$$0$2", "require$$2", "path", "resolve", "picomatch", "testString", "returnIndex", "isExtglob", "open", "close", "require$$2$1", "node", "min", "stringify", "zeros", "max", "index", "platform", "rawEmitter", "listener", "newStats", "realpath", "stats", "maj", "transform", "require$$0$3", "globParent", "isGlob", "NodeFsHandler", "FsEventsHandler", "now", "stat", "isLinux", "watch", "process$1"]
}
