{
  "version": 3,
  "sources": ["../../react-circular-progressbar/src/constants.ts", "../../react-circular-progressbar/src/Path.tsx", "../../react-circular-progressbar/src/CircularProgressbar.tsx", "../../react-circular-progressbar/src/CircularProgressbarWithChildren.tsx", "../../react-circular-progressbar/src/buildStyles.ts"],
  "sourcesContent": ["export const VIEWBOX_WIDTH = 100;\nexport const VIEWBOX_HEIGHT = 100;\nexport const VIEWBOX_HEIGHT_HALF = 50;\nexport const VIEWBOX_CENTER_X = 50;\nexport const VIEWBOX_CENTER_Y = 50;\n", "import * as React from 'react';\nimport { VIEWBOX_CENTER_X, VIEWBOX_CENTER_Y } from './constants';\n\nfunction Path({\n  className,\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n  strokeWidth,\n  style,\n}: {\n  className?: string;\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n  strokeWidth: number;\n  style?: object;\n}) {\n  return (\n    <path\n      className={className}\n      style={Object.assign({}, style, getDashStyle({ pathRadius, dashRatio, counterClockwise }))}\n      d={getPathDescription({\n        pathRadius,\n        counterClockwise,\n      })}\n      strokeWidth={strokeWidth}\n      fillOpacity={0}\n    />\n  );\n}\n\n// SVG path description specifies how the path should be drawn\nfunction getPathDescription({\n  pathRadius,\n  counterClockwise,\n}: {\n  pathRadius: number;\n  counterClockwise: boolean;\n}) {\n  const radius = pathRadius;\n  const rotation = counterClockwise ? 1 : 0;\n\n  // Move to center of canvas\n  // Relative move to top canvas\n  // Relative arc to bottom of canvas\n  // Relative arc to top of canvas\n  return `\n      M ${VIEWBOX_CENTER_X},${VIEWBOX_CENTER_Y}\n      m 0,-${radius}\n      a ${radius},${radius} ${rotation} 1 1 0,${2 * radius}\n      a ${radius},${radius} ${rotation} 1 1 0,-${2 * radius}\n    `;\n}\n\nfunction getDashStyle({\n  counterClockwise,\n  dashRatio,\n  pathRadius,\n}: {\n  counterClockwise: boolean;\n  dashRatio: number;\n  pathRadius: number;\n}) {\n  const diameter = Math.PI * 2 * pathRadius;\n  const gapLength = (1 - dashRatio) * diameter;\n\n  return {\n    // Have dash be full diameter, and gap be full diameter\n    strokeDasharray: `${diameter}px ${diameter}px`,\n    // Shift dash backward by gapLength, so gap starts appearing at correct distance\n    strokeDashoffset: `${counterClockwise ? -gapLength : gapLength}px`,\n  };\n}\n\nexport default Path;\n", "import * as React from 'react';\n\nimport {\n  VIEWBOX_WIDTH,\n  VIEWBOX_HEIGHT,\n  VIEWBOX_HEIGHT_HALF,\n  VIEWBOX_CENTER_X,\n  VIEWBOX_CENTER_Y,\n} from './constants';\nimport Path from './Path';\nimport { CircularProgressbarDefaultProps, CircularProgressbarProps } from './types';\n\nclass CircularProgressbar extends React.Component<CircularProgressbarProps> {\n  static defaultProps: CircularProgressbarDefaultProps = {\n    background: false,\n    backgroundPadding: 0,\n    circleRatio: 1,\n    classes: {\n      root: 'CircularProgressbar',\n      trail: 'CircularProgressbar-trail',\n      path: 'CircularProgressbar-path',\n      text: 'CircularProgressbar-text',\n      background: 'CircularProgressbar-background',\n    },\n    counterClockwise: false,\n    className: '',\n    maxValue: 100,\n    minValue: 0,\n    strokeWidth: 8,\n    styles: {\n      root: {},\n      trail: {},\n      path: {},\n      text: {},\n      background: {},\n    },\n    text: '',\n  };\n\n  getBackgroundPadding() {\n    if (!this.props.background) {\n      // Don't add padding if not displaying background\n      return 0;\n    }\n    return this.props.backgroundPadding;\n  }\n\n  getPathRadius() {\n    // The radius of the path is defined to be in the middle, so in order for the path to\n    // fit perfectly inside the 100x100 viewBox, need to subtract half the strokeWidth\n    return VIEWBOX_HEIGHT_HALF - this.props.strokeWidth / 2 - this.getBackgroundPadding();\n  }\n\n  // Ratio of path length to trail length, as a value between 0 and 1\n  getPathRatio() {\n    const { value, minValue, maxValue } = this.props;\n    const boundedValue = Math.min(Math.max(value, minValue), maxValue);\n    return (boundedValue - minValue) / (maxValue - minValue);\n  }\n\n  render() {\n    const {\n      circleRatio,\n      className,\n      classes,\n      counterClockwise,\n      styles,\n      strokeWidth,\n      text,\n    } = this.props;\n\n    const pathRadius = this.getPathRadius();\n    const pathRatio = this.getPathRatio();\n\n    return (\n      <svg\n        className={`${classes.root} ${className}`}\n        style={styles.root}\n        viewBox={`0 0 ${VIEWBOX_WIDTH} ${VIEWBOX_HEIGHT}`}\n        data-test-id=\"CircularProgressbar\"\n      >\n        {this.props.background ? (\n          <circle\n            className={classes.background}\n            style={styles.background}\n            cx={VIEWBOX_CENTER_X}\n            cy={VIEWBOX_CENTER_Y}\n            r={VIEWBOX_HEIGHT_HALF}\n          />\n        ) : null}\n\n        <Path\n          className={classes.trail}\n          counterClockwise={counterClockwise}\n          dashRatio={circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.trail}\n        />\n\n        <Path\n          className={classes.path}\n          counterClockwise={counterClockwise}\n          dashRatio={pathRatio * circleRatio}\n          pathRadius={pathRadius}\n          strokeWidth={strokeWidth}\n          style={styles.path}\n        />\n\n        {text ? (\n          <text\n            className={classes.text}\n            style={styles.text}\n            x={VIEWBOX_CENTER_X}\n            y={VIEWBOX_CENTER_Y}\n          >\n            {text}\n          </text>\n        ) : null}\n      </svg>\n    );\n  }\n}\n\nexport default CircularProgressbar;\n", "import * as React from 'react';\n\nimport CircularProgressbar from './CircularProgressbar';\nimport { CircularProgressbarWrapperProps } from './types';\n\ntype CircularProgressbarWithChildrenProps = CircularProgressbarWrapperProps & {\n  children?: React.ReactNode;\n};\n\n// This is a wrapper around CircularProgressbar that allows passing children,\n// which will be vertically and horizontally centered inside the progressbar automatically.\nfunction CircularProgressbarWithChildren(props: CircularProgressbarWithChildrenProps) {\n  const { children, ...circularProgressbarProps } = props;\n\n  return (\n    <div data-test-id=\"CircularProgressbarWithChildren\">\n      {/* Has an extra div wrapper because otherwise, adding content after\n      this progressbar is spaced weirdly. */}\n      <div style={{ position: 'relative', width: '100%', height: '100%' }}>\n        {/* Progressbar is not positioned absolutely, so that it can establish\n      intrinsic size for props.children's content. */}\n        <CircularProgressbar {...circularProgressbarProps} />\n\n        {/* Children are positioned absolutely, and height adapts to the\n      progressbar's intrinsic size. It appears below the progressbar,\n      but negative margin moves it back up. */}\n        {props.children ? (\n          <div\n            data-test-id=\"CircularProgressbarWithChildren__children\"\n            style={{\n              position: 'absolute',\n              width: '100%',\n              height: '100%',\n              marginTop: '-100%',\n              display: 'flex',\n              flexDirection: 'column',\n              justifyContent: 'center',\n              alignItems: 'center',\n            }}\n          >\n            {props.children}\n          </div>\n        ) : null}\n      </div>\n    </div>\n  );\n}\n\nexport default CircularProgressbarWithChildren;\n", "import { CircularProgressbarStyles } from './types';\n\nexport default function buildStyles({\n  rotation,\n  strokeLinecap,\n  textColor,\n  textSize,\n  pathColor,\n  pathTransition,\n  pathTransitionDuration,\n  trailColor,\n  backgroundColor,\n}: {\n  rotation?: number; // Number of turns, 0-1\n  strokeLinecap?: any;\n  textColor?: string;\n  textSize?: string | number;\n  pathColor?: string;\n  pathTransition?: string;\n  pathTransitionDuration?: number; // Measured in seconds\n  trailColor?: string;\n  backgroundColor?: string;\n}): CircularProgressbarStyles {\n  const rotationTransform = rotation == null ? undefined : `rotate(${rotation}turn)`;\n  const rotationTransformOrigin = rotation == null ? undefined : 'center center';\n\n  return {\n    root: {},\n    path: removeUndefinedValues({\n      stroke: pathColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n      transition: pathTransition,\n      transitionDuration: pathTransitionDuration == null ? undefined : `${pathTransitionDuration}s`,\n    }),\n    trail: removeUndefinedValues({\n      stroke: trailColor,\n      strokeLinecap: strokeLinecap,\n      transform: rotationTransform,\n      transformOrigin: rotationTransformOrigin,\n    }),\n    text: removeUndefinedValues({\n      fill: textColor,\n      fontSize: textSize,\n    }),\n    background: removeUndefinedValues({\n      fill: backgroundColor,\n    }),\n  };\n}\n\nfunction removeUndefinedValues(obj: { [key: string]: any }) {\n  Object.keys(obj).forEach((key: string) => {\n    if (obj[key] == null) {\n      delete obj[key];\n    }\n  });\n  return obj;\n}\n"],
  "mappings": "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",
  "names": ["React.createElement", "CircularProgressbar", "React.Component"]
}
